[{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\about\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\about\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\api\\trello-webhook\\route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":18,"suggestions":[{"fix":{"range":[525,751],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":20,"suggestions":[{"fix":{"range":[1552,1602],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\nimport { trelloSyncService } from '@/lib/services/trello-sync';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate webhook payload\n    if (!body.action || !body.model) {\n      return NextResponse.json(\n        { error: 'Invalid webhook payload' },\n        { status: 400 }\n      );\n    }\n\n    // Log webhook data for debugging in development only\n    if (process.env.NODE_ENV === 'development') {\n      console.log('Trello webhook received:', {\n        action: body.action.type,\n        card: body.action.data?.card?.name,\n        list: body.action.data?.list?.name,\n        member: body.action.memberCreator?.fullName,\n      });\n    }\n\n    // Filter relevant actions\n    const relevantActions = [\n      'createCard',\n      'updateCard',\n      'deleteCard',\n      'moveCardFromBoard',\n      'moveCardToBoard',\n      'addChecklistToCard',\n      'updateCheckItemStateOnCard',\n    ];\n\n    if (relevantActions.includes(body.action.type)) {\n      // Trigger sync in background\n      setTimeout(async () => {\n        try {\n          await trelloSyncService.syncFromTrello();\n          // Sync completed successfully\n        } catch {\n          // Handle sync errors silently in production\n        }\n      }, 1000); // Small delay to ensure Trello data is consistent\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    // Log errors only in development\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Webhook processing error:', error);\n    }\n\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(_request: NextRequest) {\n  // Handle Trello webhook verification\n  return NextResponse.json({ message: 'Trello webhook endpoint active' });\n}\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\blog\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\blog\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\docs\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\docs\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\error.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":20,"suggestions":[{"fix":{"range":[295,316],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect } from 'react';\n\nexport default function Error({\n  error,\n  reset,\n}: {\n  error: Error;\n  reset: () => void;\n}) {\n  useEffect(() => {\n    // Log the error to an error reporting service in development only\n    if (process.env.NODE_ENV === 'development') {\n      console.error(error);\n    }\n  }, [error]);\n\n  return (\n    <div>\n      <h2>Something went wrong!</h2>\n      <button\n        onClick={\n          // Attempt to recover by trying to re-render the segment\n          () => reset()\n        }\n      >\n        Try again\n      </button>\n    </div>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_startRealTimeSync' is assigned a value but never used.","line":39,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":42}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { FiRefreshCw, FiTrendingUp, FiUsers, FiActivity } from 'react-icons/fi';\nimport { Button } from '@heroui/button';\nimport { Toaster } from 'react-hot-toast';\n\nimport { Project } from '@/types/project';\nimport { ProjectGroup } from '@/components/project-group';\nimport { ProjectFilters } from '@/components/project-filters';\nimport { ProjectDetailModal } from '@/components/project-detail-modal';\nimport {\n  ErrorBoundary,\n  ProjectErrorFallback,\n} from '@/components/error-boundary';\nimport { TrelloSetupGuide } from '@/components/trello-setup-guide';\nimport { RealTimeSyncToggle } from '@/components/real-time-sync-toggle';\nimport {\n  ProjectGridSkeleton,\n  StatCardSkeleton,\n} from '@/components/loading-skeleton';\nimport { title, subtitle } from '@/components/primitives';\nimport { useProjectStore } from '@/lib/store';\n\nexport default function Home() {\n  const [selectedProject, setSelectedProject] = useState<Project | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    loading,\n    error,\n    lastUpdated,\n    fetchProjects,\n    refreshProjects,\n    getFilteredProjects,\n    getGroupedProjects,\n    getProjectStats,\n    startRealTimeSync: _startRealTimeSync,\n    stopRealTimeSync,\n    isRealTimeSyncActive,\n  } = useProjectStore();\n\n  const filteredProjects = getFilteredProjects();\n  const groupedProjects = getGroupedProjects();\n  const stats = getProjectStats();\n\n  useEffect(() => {\n    fetchProjects();\n\n    // Cleanup real-time sync on unmount\n    return () => {\n      if (isRealTimeSyncActive()) {\n        stopRealTimeSync();\n      }\n    };\n  }, [fetchProjects, isRealTimeSyncActive, stopRealTimeSync]);\n\n  const handleRefresh = async () => {\n    await refreshProjects();\n  };\n\n  const handleProjectClick = (project: Project) => {\n    setSelectedProject(project);\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedProject(null);\n  };\n\n  // Show Trello setup guide if credentials are missing\n  if (error && error.includes('Trello API credentials not configured')) {\n    return (\n      <ErrorBoundary fallback={ProjectErrorFallback}>\n        <div className=\"min-h-screen py-8\">\n          <Toaster position=\"top-right\" />\n          <TrelloSetupGuide />\n        </div>\n      </ErrorBoundary>\n    );\n  }\n\n  if (error) {\n    return (\n      <ProjectErrorFallback error={new Error(error)} reset={handleRefresh} />\n    );\n  }\n\n  return (\n    <ErrorBoundary fallback={ProjectErrorFallback}>\n      <div className=\"min-h-screen py-8\">\n        <Toaster position=\"top-right\" />\n\n        {/* Header */}\n        <motion.div\n          animate={{ opacity: 1, y: 0 }}\n          className=\"text-center mb-12\"\n          initial={{ opacity: 0, y: -20 }}\n        >\n          <h1 className={`${title({ size: 'lg' })} mb-4`}>\n            <span className=\"text-primary-600\">inPatch</span> Suporte\n          </h1>\n          <p className={`${subtitle()} max-w-2xl mx-auto`}>\n            Acompanhe o desenvolvimento dos principais projetos e automações do\n            time de Suporte da inChurch\n          </p>\n        </motion.div>\n\n        {/* Stats Cards */}\n        <motion.div\n          animate={{ opacity: 1, y: 0 }}\n          className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\"\n          initial={{ opacity: 0, y: 20 }}\n          transition={{ delay: 0.2 }}\n        >\n          {loading ? (\n            Array.from({ length: 4 }).map((_, index) => (\n              <StatCardSkeleton key={index} />\n            ))\n          ) : (\n            <>\n              <div className=\"liquid-glass p-4 text-center hover:scale-105 transition-transform duration-200\">\n                <FiActivity className=\"w-8 h-8 mx-auto mb-2 text-primary-600\" />\n                <div className=\"text-2xl font-bold text-foreground\">\n                  {stats.total}\n                </div>\n                <div className=\"text-sm text-default-600\">Total Projetos</div>\n              </div>\n              <div className=\"liquid-glass p-4 text-center hover:scale-105 transition-transform duration-200\">\n                <FiTrendingUp className=\"w-8 h-8 mx-auto mb-2 text-orange-500\" />\n                <div className=\"text-2xl font-bold text-foreground\">\n                  {stats.inProgress}\n                </div>\n                <div className=\"text-sm text-default-600\">Em Andamento</div>\n              </div>\n              <div className=\"liquid-glass p-4 text-center hover:scale-105 transition-transform duration-200\">\n                <FiUsers className=\"w-8 h-8 mx-auto mb-2 text-green-500\" />\n                <div className=\"text-2xl font-bold text-foreground\">\n                  {stats.completed}\n                </div>\n                <div className=\"text-sm text-default-600\">Concluídos</div>\n              </div>\n              <div className=\"liquid-glass p-4 text-center hover:scale-105 transition-transform duration-200\">\n                <div className=\"w-8 h-8 mx-auto mb-2 rounded-full bg-gradient-to-r from-primary-500 to-primary-600 flex items-center justify-center text-white font-bold shadow-lg\">\n                  {stats.avgProgress}%\n                </div>\n                <div className=\"text-2xl font-bold text-foreground\">\n                  {stats.avgProgress}%\n                </div>\n                <div className=\"text-sm text-default-600\">Progresso Médio</div>\n              </div>\n            </>\n          )}\n        </motion.div>\n\n        {/* Filters */}\n        <motion.div\n          animate={{ opacity: 1 }}\n          className=\"mb-8\"\n          initial={{ opacity: 0 }}\n          transition={{ delay: 0.4 }}\n        >\n          <ProjectFilters />\n        </motion.div>\n\n        {/* Real-time Sync Toggle */}\n        <motion.div\n          animate={{ opacity: 1 }}\n          className=\"mb-6\"\n          initial={{ opacity: 0 }}\n          transition={{ delay: 0.5 }}\n        >\n          <RealTimeSyncToggle />\n        </motion.div>\n\n        {/* Controls */}\n        <motion.div\n          animate={{ opacity: 1 }}\n          className=\"flex flex-col sm:flex-row justify-between items-center mb-8 gap-4\"\n          initial={{ opacity: 0 }}\n          transition={{ delay: 0.6 }}\n        >\n          <div className=\"text-sm text-default-600 order-2 sm:order-1\">\n            {lastUpdated && `Última atualização: ${lastUpdated}`}\n          </div>\n          <Button\n            className=\"order-1 sm:order-2\"\n            color=\"primary\"\n            isDisabled={loading}\n            startContent={\n              <FiRefreshCw\n                className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`}\n              />\n            }\n            variant=\"ghost\"\n            onClick={handleRefresh}\n          >\n            {loading ? 'Atualizando...' : 'Atualizar'}\n          </Button>\n        </motion.div>\n\n        {/* Projects Grouped by Status */}\n        {loading ? (\n          <ProjectGridSkeleton count={6} />\n        ) : (\n          <motion.div\n            animate={{ opacity: 1 }}\n            initial={{ opacity: 0 }}\n            transition={{ delay: 0.7 }}\n          >\n            {/* Em Andamento - Always first */}\n            <ProjectGroup\n              projects={groupedProjects['em-andamento']}\n              status=\"em-andamento\"\n              onProjectClick={handleProjectClick}\n            />\n\n            {/* A Fazer - Second */}\n            <ProjectGroup\n              projects={groupedProjects['a-fazer']}\n              status=\"a-fazer\"\n              onProjectClick={handleProjectClick}\n            />\n\n            {/* Concluído - Last */}\n            <ProjectGroup\n              projects={groupedProjects['concluido']}\n              status=\"concluido\"\n              onProjectClick={handleProjectClick}\n            />\n          </motion.div>\n        )}\n\n        {/* Empty State */}\n        {!loading && filteredProjects.length === 0 && (\n          <motion.div\n            animate={{ opacity: 1 }}\n            className=\"text-center py-16\"\n            initial={{ opacity: 0 }}\n          >\n            <div className=\"text-6xl mb-4\">📋</div>\n            <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n              Nenhum projeto encontrado\n            </h3>\n            <p className=\"text-default-600 mb-4\">\n              Não há projetos disponíveis no momento.\n            </p>\n            <Button color=\"primary\" onClick={handleRefresh}>\n              Tentar novamente\n            </Button>\n          </motion.div>\n        )}\n\n        {/* Project Detail Modal */}\n        <ProjectDetailModal\n          isOpen={isModalOpen}\n          project={selectedProject}\n          onClose={handleCloseModal}\n        />\n      </div>\n    </ErrorBoundary>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\pricing\\layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\pricing\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\app\\providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\counter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\error-boundary.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":20,"suggestions":[{"fix":{"range":[828,889],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Button } from '@heroui/button';\nimport { FiAlertTriangle, FiRefreshCw } from 'react-icons/fi';\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\ninterface ErrorBoundaryProps {\n  children: React.ReactNode;\n  fallback?: React.ComponentType<{ error?: Error; reset: () => void }>;\n}\n\nexport class ErrorBoundary extends React.Component<\n  ErrorBoundaryProps,\n  ErrorBoundaryState\n> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    // Log errors only in development\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error caught by boundary:', error, errorInfo);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      const reset = () => {\n        this.setState({ hasError: false, error: undefined });\n      };\n\n      if (this.props.fallback) {\n        const FallbackComponent = this.props.fallback;\n\n        return <FallbackComponent error={this.state.error} reset={reset} />;\n      }\n\n      return <DefaultErrorFallback error={this.state.error} reset={reset} />;\n    }\n\n    return this.props.children;\n  }\n}\n\ninterface ErrorFallbackProps {\n  error?: Error;\n  reset: () => void;\n}\n\nexport const DefaultErrorFallback: React.FC<ErrorFallbackProps> = ({\n  error,\n  reset,\n}) => (\n  <div className=\"min-h-screen flex items-center justify-center p-4\">\n    <div className=\"liquid-glass p-8 max-w-md w-full text-center\">\n      <FiAlertTriangle className=\"w-16 h-16 mx-auto mb-4 text-red-500\" />\n      <h2 className=\"text-xl font-bold text-foreground mb-2\">\n        Algo deu errado\n      </h2>\n      <p className=\"text-default-600 mb-4\">\n        {error?.message || 'Ocorreu um erro inesperado. Tente novamente.'}\n      </p>\n      <Button\n        color=\"primary\"\n        startContent={<FiRefreshCw className=\"w-4 h-4\" />}\n        onClick={reset}\n      >\n        Tentar Novamente\n      </Button>\n    </div>\n  </div>\n);\n\nexport const ProjectErrorFallback: React.FC<ErrorFallbackProps> = ({\n  error,\n  reset,\n}) => (\n  <div className=\"liquid-glass p-6 text-center\">\n    <FiAlertTriangle className=\"w-12 h-12 mx-auto mb-3 text-red-500\" />\n    <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n      Erro ao carregar projetos\n    </h3>\n    <p className=\"text-default-600 text-sm mb-4\">\n      {error?.message || 'Não foi possível carregar os projetos.'}\n    </p>\n    <Button\n      color=\"primary\"\n      size=\"sm\"\n      startContent={<FiRefreshCw className=\"w-4 h-4\" />}\n      variant=\"ghost\"\n      onClick={reset}\n    >\n      Tentar Novamente\n    </Button>\n  </div>\n);\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\icons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\loading-skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\navbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\primitives.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\project-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\project-detail-modal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\project-filters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\project-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\real-time-sync-toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\theme-switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\components\\trello-setup-guide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\config\\fonts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\config\\site.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\data\\mock-projects.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\api\\test-enhanced-trello-integration.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":16,"suggestions":[{"fix":{"range":[1067,1141],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'projects' is defined but never used. Allowed unused args must match /^_.*?$/u.","line":433,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":433,"endColumn":60},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":625,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":625,"endColumn":18,"suggestions":[{"fix":{"range":[16875,16920],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":639,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":639,"endColumn":18,"suggestions":[{"fix":{"range":[17235,17358],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":649,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":649,"endColumn":16,"suggestions":[{"fix":{"range":[17473,17508],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":650,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":650,"endColumn":16,"suggestions":[{"fix":{"range":[17513,17586],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":651,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":651,"endColumn":16,"suggestions":[{"fix":{"range":[17591,17619],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":653,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":653,"endColumn":16,"suggestions":[{"fix":{"range":[17625,17662],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":654,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":654,"endColumn":16,"suggestions":[{"fix":{"range":[17667,17727],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":655,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":655,"endColumn":16,"suggestions":[{"fix":{"range":[17732,17785],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":656,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":656,"endColumn":16,"suggestions":[{"fix":{"range":[17790,17841],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":657,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":657,"endColumn":16,"suggestions":[{"fix":{"range":[17846,17897],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":658,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":658,"endColumn":16,"suggestions":[{"fix":{"range":[17902,17962],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":659,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":659,"endColumn":16,"suggestions":[{"fix":{"range":[17967,18080],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":663,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":663,"endColumn":16,"suggestions":[{"fix":{"range":[18086,18126],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":668,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":668,"endColumn":18,"suggestions":[{"fix":{"range":[18292,18332],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":669,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":669,"endColumn":18,"suggestions":[{"fix":{"range":[18339,18459],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":672,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":672,"endColumn":18,"suggestions":[{"fix":{"range":[18466,18521],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":675,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":675,"endColumn":20,"suggestions":[{"fix":{"range":[18566,18600],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":679,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":679,"endColumn":24,"suggestions":[{"fix":{"range":[18711,18771],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":685,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":685,"endColumn":18,"suggestions":[{"fix":{"range":[18836,18944],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":689,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":689,"endColumn":18,"suggestions":[{"fix":{"range":[18964,19036],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":692,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":692,"endColumn":16,"suggestions":[{"fix":{"range":[19048,19083],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { cacheService } from '../cache/cache-service';\nimport {\n  advancedRateLimiter,\n  enhancedErrorHandler,\n} from '../utils/advanced-rate-limiter';\n\nimport { enhancedTrelloApi } from './trello-enhanced';\nimport { webhookHandler } from './webhook-handler';\n\nimport { Project } from '@/types/project';\n\ninterface TestResult {\n  testName: string;\n  success: boolean;\n  duration: number;\n  error?: string;\n  details?: any;\n}\n\ninterface TestSuite {\n  suiteName: string;\n  results: TestResult[];\n  totalTests: number;\n  passedTests: number;\n  failedTests: number;\n  totalDuration: number;\n}\n\n/**\n * Comprehensive test suite for Enhanced Trello API integration\n * Tests all Phase 3 improvements and validates functionality\n */\nexport class EnhancedTrelloIntegrationTests {\n  private testResults: TestSuite[] = [];\n\n  /**\n   * Run all integration tests\n   */\n  async runAllTests(): Promise<{\n    success: boolean;\n    totalSuites: number;\n    totalTests: number;\n    passedTests: number;\n    failedTests: number;\n    duration: number;\n    suites: TestSuite[];\n  }> {\n    console.log('🚀 Starting Enhanced Trello API Integration Tests - Fase 3');\n    const startTime = Date.now();\n\n    this.testResults = [];\n\n    // Run test suites\n    await this.testEnhancedTrelloAPI();\n    await this.testCacheService();\n    await this.testAdvancedRateLimiter();\n    await this.testWebhookHandler();\n    await this.testErrorHandling();\n    await this.testPerformanceMetrics();\n\n    const totalDuration = Date.now() - startTime;\n    const totalTests = this.testResults.reduce(\n      (sum, suite) => sum + suite.totalTests,\n      0\n    );\n    const passedTests = this.testResults.reduce(\n      (sum, suite) => sum + suite.passedTests,\n      0\n    );\n    const failedTests = this.testResults.reduce(\n      (sum, suite) => sum + suite.failedTests,\n      0\n    );\n\n    const summary = {\n      success: failedTests === 0,\n      totalSuites: this.testResults.length,\n      totalTests,\n      passedTests,\n      failedTests,\n      duration: totalDuration,\n      suites: this.testResults,\n    };\n\n    this.printTestSummary(summary);\n\n    return summary;\n  }\n\n  /**\n   * Test Enhanced Trello API functionality\n   */\n  private async testEnhancedTrelloAPI(): Promise<void> {\n    const suite: TestSuite = {\n      suiteName: 'Enhanced Trello API',\n      results: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0,\n    };\n\n    // Test 1: Health Check\n    await this.runTest(suite, 'Health Check', async () => {\n      const health = await enhancedTrelloApi.healthCheck();\n\n      if (!health || !health.status) {\n        throw new Error('Health check returned invalid response');\n      }\n\n      return { status: health.status, metrics: health.metrics };\n    });\n\n    // Test 2: Get Optimized Board Cards\n    await this.runTest(suite, 'Get Optimized Board Cards', async () => {\n      const cards = await enhancedTrelloApi.getOptimizedBoardCards();\n\n      if (!Array.isArray(cards)) {\n        throw new Error('Expected array of cards');\n      }\n\n      return { cardCount: cards.length };\n    });\n\n    // Test 3: Get Cached Board Cards\n    await this.runTest(suite, 'Get Cached Board Cards', async () => {\n      const cards = await enhancedTrelloApi.getCachedBoardCards();\n\n      if (!Array.isArray(cards)) {\n        throw new Error('Expected array of cards');\n      }\n\n      return { cardCount: cards.length, cached: true };\n    });\n\n    // Test 4: Transform Cards to Projects Enhanced\n    await this.runTest(suite, 'Transform Cards Enhanced', async () => {\n      const cards = await enhancedTrelloApi.getOptimizedBoardCards();\n      const projects = enhancedTrelloApi.transformCardsToProjectsEnhanced(\n        cards.slice(0, 5)\n      );\n\n      if (!Array.isArray(projects)) {\n        throw new Error('Expected array of projects');\n      }\n\n      // Validate project structure\n      projects.forEach(project => {\n        if (!project.id || !project.title || !project.status) {\n          throw new Error('Invalid project structure');\n        }\n      });\n\n      return {\n        projectCount: projects.length,\n        sampleProject: projects[0]?.title,\n      };\n    });\n\n    // Test 5: Batch Operations (if we have multiple cards)\n    await this.runTest(suite, 'Batch Card Operations', async () => {\n      const cards = await enhancedTrelloApi.getOptimizedBoardCards();\n      const cardIds = cards.slice(0, 3).map(card => card.id);\n\n      if (cardIds.length > 0) {\n        const batchCards = await enhancedTrelloApi.getBatchCards(cardIds);\n\n        if (!Array.isArray(batchCards)) {\n          throw new Error('Expected array of batch cards');\n        }\n\n        return {\n          requestedCards: cardIds.length,\n          receivedCards: batchCards.length,\n        };\n      }\n\n      return { message: 'No cards available for batch testing' };\n    });\n\n    // Test 6: Circuit Breaker Status\n    await this.runTest(suite, 'Circuit Breaker Status', async () => {\n      const status = enhancedTrelloApi.getCircuitBreakerStatus();\n\n      if (!status || typeof status.state !== 'string') {\n        throw new Error('Invalid circuit breaker status');\n      }\n\n      return status;\n    });\n\n    // Test 7: API Metrics\n    await this.runTest(suite, 'API Metrics', async () => {\n      const metrics = enhancedTrelloApi.getMetrics();\n\n      if (!metrics || typeof metrics.totalRequests !== 'number') {\n        throw new Error('Invalid metrics response');\n      }\n\n      return metrics;\n    });\n\n    this.testResults.push(suite);\n  }\n\n  /**\n   * Test Cache Service functionality\n   */\n  private async testCacheService(): Promise<void> {\n    const suite: TestSuite = {\n      suiteName: 'Cache Service',\n      results: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0,\n    };\n\n    // Test 1: Cache Health Check\n    await this.runTest(suite, 'Cache Health Check', async () => {\n      const isHealthy = cacheService.isHealthy();\n\n      return { healthy: isHealthy };\n    });\n\n    // Test 2: Cache Statistics\n    await this.runTest(suite, 'Cache Statistics', async () => {\n      const stats = cacheService.getStats();\n\n      if (!stats || typeof stats.totalEntries !== 'number') {\n        throw new Error('Invalid cache stats');\n      }\n\n      return stats;\n    });\n\n    // Test 3: Set and Get Cached Projects\n    await this.runTest(suite, 'Set and Get Cached Projects', async () => {\n      const mockProjects: Project[] = [\n        {\n          id: 'test-1',\n          title: 'Test Project',\n          description: 'Test Description',\n          progress: 50,\n          platforms: ['N8N'],\n          responsible: ['Guilherme Souza'],\n          startDate: new Date().toISOString(),\n          estimatedEndDate: new Date(Date.now() + 86400000).toISOString(),\n          status: 'em-andamento',\n          priority: 'medium',\n          trelloCardId: 'test-card-1',\n          labels: ['test'],\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        },\n      ];\n\n      await cacheService.setCachedProjects(mockProjects);\n      const cachedProjects = await cacheService.getCachedProjects();\n\n      if (!cachedProjects || cachedProjects.length !== 1) {\n        throw new Error('Cache set/get failed');\n      }\n\n      return { cached: cachedProjects.length, original: mockProjects.length };\n    });\n\n    // Test 4: Cache Invalidation\n    await this.runTest(suite, 'Cache Invalidation', async () => {\n      await cacheService.invalidateProjects();\n      const cachedProjects = await cacheService.getCachedProjects();\n\n      if (cachedProjects !== null) {\n        throw new Error('Cache invalidation failed');\n      }\n\n      return { invalidated: true };\n    });\n\n    // Test 5: Cache Configuration\n    await this.runTest(suite, 'Cache Configuration', async () => {\n      const config = cacheService.getConfig();\n\n      if (!config || typeof config.maxSize !== 'number') {\n        throw new Error('Invalid cache configuration');\n      }\n\n      return config;\n    });\n\n    this.testResults.push(suite);\n  }\n\n  /**\n   * Test Advanced Rate Limiter\n   */\n  private async testAdvancedRateLimiter(): Promise<void> {\n    const suite: TestSuite = {\n      suiteName: 'Advanced Rate Limiter',\n      results: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0,\n    };\n\n    // Test 1: Rate Limit Check\n    await this.runTest(suite, 'Rate Limit Check', async () => {\n      const testKey = 'test-endpoint';\n      const allowed = advancedRateLimiter.isAllowed(testKey);\n\n      return { allowed, key: testKey };\n    });\n\n    // Test 2: Rate Limit Status\n    await this.runTest(suite, 'Rate Limit Status', async () => {\n      const testKey = 'test-endpoint';\n      const status = advancedRateLimiter.getStatus(testKey);\n\n      if (!status || typeof status.allowed !== 'boolean') {\n        throw new Error('Invalid rate limit status');\n      }\n\n      return status;\n    });\n\n    // Test 3: Rate Limit Statistics\n    await this.runTest(suite, 'Rate Limit Statistics', async () => {\n      const stats = advancedRateLimiter.getStats();\n\n      if (!stats || typeof stats.totalKeys !== 'number') {\n        throw new Error('Invalid rate limit stats');\n      }\n\n      return stats;\n    });\n\n    // Test 4: Multiple Requests\n    await this.runTest(suite, 'Multiple Requests Handling', async () => {\n      const testKey = 'burst-test';\n      let allowedCount = 0;\n\n      // Try 5 requests quickly\n      for (let i = 0; i < 5; i++) {\n        if (advancedRateLimiter.isAllowed(testKey)) {\n          allowedCount++;\n        }\n      }\n\n      return { totalRequests: 5, allowedRequests: allowedCount };\n    });\n\n    this.testResults.push(suite);\n  }\n\n  /**\n   * Test Webhook Handler\n   */\n  private async testWebhookHandler(): Promise<void> {\n    const suite: TestSuite = {\n      suiteName: 'Webhook Handler',\n      results: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0,\n    };\n\n    // Test 1: Webhook Health Status\n    await this.runTest(suite, 'Webhook Health Status', async () => {\n      const health = webhookHandler.getHealthStatus();\n\n      if (!health || !health.status) {\n        throw new Error('Invalid webhook health status');\n      }\n\n      return health;\n    });\n\n    // Test 2: Webhook Statistics\n    await this.runTest(suite, 'Webhook Statistics', async () => {\n      const stats = webhookHandler.getStats();\n\n      if (!stats || typeof stats.totalProcessed !== 'number') {\n        throw new Error('Invalid webhook stats');\n      }\n\n      return stats;\n    });\n\n    // Test 3: Mock Webhook Event Processing\n    await this.runTest(suite, 'Mock Webhook Event Processing', async () => {\n      const mockEvent = {\n        action: {\n          id: 'test-action-1',\n          type: 'updateCard',\n          date: new Date().toISOString(),\n          memberCreator: {\n            id: 'test-member',\n            fullName: 'Test User',\n            username: 'testuser',\n          },\n        },\n        model: {\n          id: 'test-model',\n          name: 'Test Model',\n        },\n        data: {\n          card: {\n            id: 'test-card-1',\n            name: 'Test Card',\n            desc: 'Test Description',\n          },\n          old: {\n            name: 'Old Test Card',\n          },\n        },\n      };\n\n      const result = await webhookHandler.processWebhookEvent(mockEvent);\n\n      if (!result || typeof result.success !== 'boolean') {\n        throw new Error('Invalid webhook processing result');\n      }\n\n      return result;\n    });\n\n    // Test 4: Webhook Subscription\n    await this.runTest(suite, 'Webhook Subscription', async () => {\n      let callbackCalled = false;\n\n      const unsubscribe = webhookHandler.subscribe(projects => {\n        callbackCalled = true;\n      });\n\n      // Test unsubscribe\n      unsubscribe();\n\n      return { subscriptionTest: true, callbackRegistered: !callbackCalled };\n    });\n\n    this.testResults.push(suite);\n  }\n\n  /**\n   * Test Error Handling\n   */\n  private async testErrorHandling(): Promise<void> {\n    const suite: TestSuite = {\n      suiteName: 'Error Handling',\n      results: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0,\n    };\n\n    // Test 1: Error Categorization\n    await this.runTest(suite, 'Error Categorization', async () => {\n      const testErrors = [\n        { status: 401, message: 'Unauthorized' },\n        { status: 429, message: 'Rate Limited' },\n        { status: 500, message: 'Server Error' },\n        { message: 'Network Error' },\n      ];\n\n      const results = testErrors.map(error => {\n        const category = enhancedErrorHandler.categorizeError(error);\n\n        return {\n          error: error.status || error.message,\n          category: category.category,\n        };\n      });\n\n      return { categorizedErrors: results };\n    });\n\n    // Test 2: Error Statistics\n    await this.runTest(suite, 'Error Statistics', async () => {\n      const stats = enhancedErrorHandler.getErrorStats();\n\n      if (!stats || typeof stats.totalErrors !== 'number') {\n        throw new Error('Invalid error stats');\n      }\n\n      return stats;\n    });\n\n    // Test 3: Endpoint Health Check\n    await this.runTest(suite, 'Endpoint Health Check', async () => {\n      const testEndpoint = 'test-endpoint';\n      const isHealthy = enhancedErrorHandler.isEndpointHealthy(testEndpoint);\n\n      return { endpoint: testEndpoint, healthy: isHealthy };\n    });\n\n    this.testResults.push(suite);\n  }\n\n  /**\n   * Test Performance Metrics\n   */\n  private async testPerformanceMetrics(): Promise<void> {\n    const suite: TestSuite = {\n      suiteName: 'Performance Metrics',\n      results: [],\n      totalTests: 0,\n      passedTests: 0,\n      failedTests: 0,\n      totalDuration: 0,\n    };\n\n    // Test 1: API Response Time\n    await this.runTest(suite, 'API Response Time', async () => {\n      const startTime = Date.now();\n\n      try {\n        await enhancedTrelloApi.getOptimizedBoardCards(['id', 'name']);\n        const responseTime = Date.now() - startTime;\n\n        return {\n          responseTime,\n          acceptable: responseTime < 5000,\n          fast: responseTime < 1000,\n        };\n      } catch (error) {\n        const responseTime = Date.now() - startTime;\n\n        return {\n          responseTime,\n          error: true,\n          message: error instanceof Error ? error.message : 'Unknown error',\n        };\n      }\n    });\n\n    // Test 2: Cache Performance\n    await this.runTest(suite, 'Cache Performance', async () => {\n      const iterations = 100;\n      const testData = Array.from({ length: 10 }, (_, i) => ({\n        id: `perf-test-${i}`,\n        title: `Performance Test ${i}`,\n        description: 'Performance test project',\n        progress: Math.floor(Math.random() * 100),\n        platforms: ['N8N'],\n        responsible: ['Guilherme Souza'],\n        startDate: new Date().toISOString(),\n        estimatedEndDate: new Date(Date.now() + 86400000).toISOString(),\n        status: 'em-andamento' as const,\n        priority: 'medium' as const,\n        trelloCardId: `perf-card-${i}`,\n        labels: ['performance'],\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      }));\n\n      // Test cache write performance\n      const writeStartTime = Date.now();\n\n      for (let i = 0; i < iterations; i++) {\n        await cacheService.setCachedProjects(testData);\n      }\n      const writeTime = Date.now() - writeStartTime;\n\n      // Test cache read performance\n      const readStartTime = Date.now();\n\n      for (let i = 0; i < iterations; i++) {\n        await cacheService.getCachedProjects();\n      }\n      const readTime = Date.now() - readStartTime;\n\n      return {\n        iterations,\n        writeTime,\n        readTime,\n        avgWriteTime: writeTime / iterations,\n        avgReadTime: readTime / iterations,\n      };\n    });\n\n    // Test 3: Memory Usage Estimation\n    await this.runTest(suite, 'Memory Usage Estimation', async () => {\n      const stats = cacheService.getStats();\n      const memoryUsage = stats.memoryUsage;\n\n      return {\n        memoryUsage,\n        memoryUsageMB: Math.round((memoryUsage / (1024 * 1024)) * 100) / 100,\n        acceptable: memoryUsage < 50 * 1024 * 1024, // 50MB\n      };\n    });\n\n    this.testResults.push(suite);\n  }\n\n  /**\n   * Run individual test\n   */\n  private async runTest(\n    suite: TestSuite,\n    testName: string,\n    testFunction: () => Promise<any>\n  ): Promise<void> {\n    const startTime = Date.now();\n\n    suite.totalTests++;\n\n    try {\n      const result = await testFunction();\n      const duration = Date.now() - startTime;\n\n      suite.results.push({\n        testName,\n        success: true,\n        duration,\n        details: result,\n      });\n\n      suite.passedTests++;\n      suite.totalDuration += duration;\n\n      console.log(`✅ ${testName} - ${duration}ms`);\n    } catch (error) {\n      const duration = Date.now() - startTime;\n\n      suite.results.push({\n        testName,\n        success: false,\n        duration,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      });\n\n      suite.failedTests++;\n      suite.totalDuration += duration;\n\n      console.log(\n        `❌ ${testName} - ${duration}ms - ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Print comprehensive test summary\n   */\n  private printTestSummary(summary: any): void {\n    console.log('\\n' + '='.repeat(80));\n    console.log('🧪 ENHANCED TRELLO API INTEGRATION TESTS - FASE 3 SUMMARY');\n    console.log('='.repeat(80));\n\n    console.log(`\\n📊 Overall Results:`);\n    console.log(`   Total Test Suites: ${summary.totalSuites}`);\n    console.log(`   Total Tests: ${summary.totalTests}`);\n    console.log(`   ✅ Passed: ${summary.passedTests}`);\n    console.log(`   ❌ Failed: ${summary.failedTests}`);\n    console.log(`   ⏱️  Total Duration: ${summary.duration}ms`);\n    console.log(\n      `   📈 Success Rate: ${((summary.passedTests / summary.totalTests) * 100).toFixed(1)}%`\n    );\n\n    console.log(`\\n📋 Test Suite Details:`);\n    summary.suites.forEach((suite: TestSuite) => {\n      const successRate =\n        suite.totalTests > 0 ? (suite.passedTests / suite.totalTests) * 100 : 0;\n\n      console.log(`\\n   ${suite.suiteName}:`);\n      console.log(\n        `     Tests: ${suite.passedTests}/${suite.totalTests} passed (${successRate.toFixed(1)}%)`\n      );\n      console.log(`     Duration: ${suite.totalDuration}ms`);\n\n      if (suite.failedTests > 0) {\n        console.log(`     Failed Tests:`);\n        suite.results\n          .filter(result => !result.success)\n          .forEach(result => {\n            console.log(`       - ${result.testName}: ${result.error}`);\n          });\n      }\n    });\n\n    if (summary.success) {\n      console.log(\n        `\\n🎉 ALL TESTS PASSED! Enhanced Trello API integration is working correctly.`\n      );\n    } else {\n      console.log(`\\n⚠️  Some tests failed. Please review the errors above.`);\n    }\n\n    console.log('\\n' + '='.repeat(80));\n  }\n\n  /**\n   * Generate test report\n   */\n  generateReport(): string {\n    const report = {\n      timestamp: new Date().toISOString(),\n      phase: 'Fase 3 - API Trello Enhancement',\n      testResults: this.testResults,\n      summary: {\n        totalSuites: this.testResults.length,\n        totalTests: this.testResults.reduce(\n          (sum, suite) => sum + suite.totalTests,\n          0\n        ),\n        passedTests: this.testResults.reduce(\n          (sum, suite) => sum + suite.passedTests,\n          0\n        ),\n        failedTests: this.testResults.reduce(\n          (sum, suite) => sum + suite.failedTests,\n          0\n        ),\n        totalDuration: this.testResults.reduce(\n          (sum, suite) => sum + suite.totalDuration,\n          0\n        ),\n      },\n    };\n\n    return JSON.stringify(report, null, 2);\n  }\n}\n\n// Export test runner\nexport const enhancedTrelloTests = new EnhancedTrelloIntegrationTests();\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\api\\trello-enhanced.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":196,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":196,"endColumn":19,"suggestions":[{"fix":{"range":[4950,5014],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":207,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":207,"endColumn":19,"suggestions":[{"fix":{"range":[5259,5318],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":253,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":253,"endColumn":25,"suggestions":[{"fix":{"range":[6525,6580],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":294,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":294,"endColumn":23,"suggestions":[{"fix":{"range":[7633,7742],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":346,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":346,"endColumn":21,"suggestions":[{"fix":{"range":[8965,9071],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":351,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":351,"endColumn":21,"suggestions":[{"fix":{"range":[9104,9207],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":393,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":393,"endColumn":23,"suggestions":[{"fix":{"range":[10213,10272],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":395,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":395,"endColumn":23,"suggestions":[{"fix":{"range":[10309,10373],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":399,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":399,"endColumn":19,"suggestions":[{"fix":{"range":[10420,10480],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":441,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":441,"endColumn":19,"suggestions":[{"fix":{"range":[11458,11503],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":531,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":531,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":584,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":584,"endColumn":21,"suggestions":[{"fix":{"range":[14911,14967],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":594,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":594,"endColumn":21,"suggestions":[{"fix":{"range":[15145,15202],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Project, Platform, TeamMember } from '@/types/project';\nimport { TrelloAPI } from '@/lib/trello';\nimport { getAPIConfig } from '@/lib/config/api';\nimport { APIError, sanitizeString } from '@/lib/utils/validation';\n\ninterface TrelloCard {\n  id: string;\n  name: string;\n  desc: string;\n  due: string | null;\n  dateLastActivity: string;\n  list: {\n    id: string;\n    name: string;\n  };\n  labels: Array<{\n    id: string;\n    name: string;\n    color: string;\n  }>;\n  members: Array<{\n    id: string;\n    fullName: string;\n    username: string;\n  }>;\n  badges: {\n    checkItems: number;\n    checkItemsChecked: number;\n  };\n}\n\ninterface WebhookConfig {\n  modelType: 'board' | 'list' | 'card';\n  events: string[];\n  description?: string;\n}\n\ninterface BatchOperation<T> {\n  id: string;\n  operation: () => Promise<T>;\n  retries: number;\n  priority: 'high' | 'medium' | 'low';\n}\n\ninterface CircuitBreakerState {\n  failures: number;\n  lastFailureTime: number;\n  state: 'closed' | 'open' | 'half-open';\n}\n\ninterface APIMetrics {\n  totalRequests: number;\n  successfulRequests: number;\n  failedRequests: number;\n  averageResponseTime: number;\n  lastRequestTime: number;\n}\n\n/**\n * Enhanced Trello API with advanced features:\n * - Batch operations for multiple cards\n * - Advanced webhook management\n * - Circuit breaker pattern\n * - Retry with exponential backoff\n * - Performance metrics\n * - Connection pooling simulation\n */\nexport class EnhancedTrelloAPI extends TrelloAPI {\n  private batchQueue: Map<string, BatchOperation<any>> = new Map();\n  private circuitBreaker: CircuitBreakerState = {\n    failures: 0,\n    lastFailureTime: 0,\n    state: 'closed',\n  };\n  private metrics: APIMetrics = {\n    totalRequests: 0,\n    successfulRequests: 0,\n    failedRequests: 0,\n    averageResponseTime: 0,\n    lastRequestTime: 0,\n  };\n  private activeWebhooks: Map<string, any> = new Map();\n  private connectionPool: Set<string> = new Set();\n\n  // Circuit breaker configuration\n  private readonly CIRCUIT_BREAKER_THRESHOLD = 5;\n  private readonly CIRCUIT_BREAKER_TIMEOUT = 60000; // 1 minute\n  private readonly MAX_BATCH_SIZE = 10;\n  private readonly RETRY_DELAYS = [1000, 2000, 4000, 8000, 16000]; // Exponential backoff\n\n  constructor() {\n    super();\n    this.initializeConnectionPool();\n  }\n\n  /**\n   * Initialize connection pool simulation\n   */\n  private initializeConnectionPool(): void {\n    // Simulate connection pool with 5 connections\n    for (let i = 0; i < 5; i++) {\n      this.connectionPool.add(`conn-${i}`);\n    }\n  }\n\n  /**\n   * Enhanced request method with circuit breaker and metrics\n   */\n  private async makeEnhancedRequest(\n    endpoint: string,\n    options: Record<string, any> = {},\n    retryCount: number = 0\n  ): Promise<any> {\n    // Check circuit breaker\n    if (this.circuitBreaker.state === 'open') {\n      const timeSinceLastFailure =\n        Date.now() - this.circuitBreaker.lastFailureTime;\n\n      if (timeSinceLastFailure < this.CIRCUIT_BREAKER_TIMEOUT) {\n        throw new APIError(\n          'Circuit breaker is open. Service temporarily unavailable.',\n          503,\n          endpoint\n        );\n      } else {\n        this.circuitBreaker.state = 'half-open';\n      }\n    }\n\n    const startTime = Date.now();\n\n    this.metrics.totalRequests++;\n\n    try {\n      // Use parent's makeRequest method\n      const result = await (this as any).makeRequest(endpoint, options);\n\n      // Update metrics on success\n      const responseTime = Date.now() - startTime;\n\n      this.updateMetrics(true, responseTime);\n      this.resetCircuitBreaker();\n\n      return result;\n    } catch (error) {\n      const responseTime = Date.now() - startTime;\n\n      this.updateMetrics(false, responseTime);\n      this.handleCircuitBreakerFailure();\n\n      // Retry with exponential backoff\n      if (retryCount < this.RETRY_DELAYS.length && this.shouldRetry(error)) {\n        const delay = this.RETRY_DELAYS[retryCount];\n\n        await this.sleep(delay);\n\n        return this.makeEnhancedRequest(endpoint, options, retryCount + 1);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Update API metrics\n   */\n  private updateMetrics(success: boolean, responseTime: number): void {\n    if (success) {\n      this.metrics.successfulRequests++;\n    } else {\n      this.metrics.failedRequests++;\n    }\n\n    // Update average response time\n    const totalSuccessful = this.metrics.successfulRequests;\n\n    if (totalSuccessful > 0) {\n      this.metrics.averageResponseTime =\n        (this.metrics.averageResponseTime * (totalSuccessful - 1) +\n          responseTime) /\n        totalSuccessful;\n    }\n\n    this.metrics.lastRequestTime = Date.now();\n  }\n\n  /**\n   * Handle circuit breaker failure\n   */\n  private handleCircuitBreakerFailure(): void {\n    this.circuitBreaker.failures++;\n    this.circuitBreaker.lastFailureTime = Date.now();\n\n    if (this.circuitBreaker.failures >= this.CIRCUIT_BREAKER_THRESHOLD) {\n      this.circuitBreaker.state = 'open';\n      console.warn('Circuit breaker opened due to repeated failures');\n    }\n  }\n\n  /**\n   * Reset circuit breaker on success\n   */\n  private resetCircuitBreaker(): void {\n    if (this.circuitBreaker.state === 'half-open') {\n      this.circuitBreaker.state = 'closed';\n      this.circuitBreaker.failures = 0;\n      console.info('Circuit breaker closed - service recovered');\n    }\n  }\n\n  /**\n   * Determine if request should be retried\n   */\n  private shouldRetry(error: any): boolean {\n    if (error instanceof APIError) {\n      // Retry on server errors and rate limits, but not on client errors\n      return error.status >= 500 || error.status === 429;\n    }\n\n    return true; // Retry network errors\n  }\n\n  /**\n   * Sleep utility for retry delays\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Batch operation to get multiple cards efficiently\n   */\n  async getBatchCards(cardIds: string[]): Promise<TrelloCard[]> {\n    if (cardIds.length === 0) return [];\n\n    const batches: string[][] = [];\n\n    for (let i = 0; i < cardIds.length; i += this.MAX_BATCH_SIZE) {\n      batches.push(cardIds.slice(i, i + this.MAX_BATCH_SIZE));\n    }\n\n    const batchPromises = batches.map(async (batch, index) => {\n      // Add small delay between batches to respect rate limits\n      if (index > 0) {\n        await this.sleep(100 * index);\n      }\n\n      return Promise.all(\n        batch.map(async cardId => {\n          try {\n            return await this.getCard(cardId);\n          } catch (error) {\n            console.warn(`Failed to fetch card ${cardId}:`, error);\n\n            return null;\n          }\n        })\n      );\n    });\n\n    const results = await Promise.all(batchPromises);\n\n    return results.flat().filter((card): card is TrelloCard => card !== null);\n  }\n\n  /**\n   * Batch operation to update multiple cards\n   */\n  async updateBatchCards(\n    updates: Array<{ cardId: string; data: Partial<Project> }>\n  ): Promise<TrelloCard[]> {\n    const batches: (typeof updates)[] = [];\n\n    for (let i = 0; i < updates.length; i += this.MAX_BATCH_SIZE) {\n      batches.push(updates.slice(i, i + this.MAX_BATCH_SIZE));\n    }\n\n    const results: TrelloCard[] = [];\n\n    for (const [index, batch] of batches.entries()) {\n      // Add delay between batches\n      if (index > 0) {\n        await this.sleep(200 * index);\n      }\n\n      const batchResults = await Promise.allSettled(\n        batch.map(({ cardId, data }) => this.updateCard(cardId, data))\n      );\n\n      batchResults.forEach((result, i) => {\n        if (result.status === 'fulfilled') {\n          results.push(result.value);\n        } else {\n          console.warn(\n            `Failed to update card ${batch[i].cardId}:`,\n            result.reason\n          );\n        }\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Advanced webhook management with multiple event types\n   */\n  async setupAdvancedWebhooks(callbackURL: string): Promise<void> {\n    // Validate callback URL\n    try {\n      new URL(callbackURL);\n    } catch {\n      throw new APIError('Invalid callback URL', 400, '/webhooks');\n    }\n\n    // Clean up existing webhooks first\n    await this.cleanupExistingWebhooks();\n\n    const webhookConfigs: WebhookConfig[] = [\n      {\n        modelType: 'board',\n        events: ['createCard', 'updateCard', 'deleteCard', 'moveCard'],\n        description: 'inPatch Suporte - Board Events',\n      },\n      {\n        modelType: 'list',\n        events: ['updateList', 'createList'],\n        description: 'inPatch Suporte - List Events',\n      },\n      {\n        modelType: 'card',\n        events: [\n          'commentCard',\n          'addAttachmentToCard',\n          'updateCheckItemStateOnCard',\n        ],\n        description: 'inPatch Suporte - Card Events',\n      },\n    ];\n\n    for (const config of webhookConfigs) {\n      try {\n        const webhook = await this.createSpecificWebhook(callbackURL, config);\n\n        this.activeWebhooks.set(webhook.id, webhook);\n        console.info(\n          `Created webhook for ${config.modelType} events:`,\n          webhook.id\n        );\n      } catch (error) {\n        console.warn(\n          `Failed to create webhook for ${config.modelType}:`,\n          error\n        );\n      }\n    }\n  }\n\n  /**\n   * Create specific webhook with configuration\n   */\n  private async createSpecificWebhook(\n    callbackURL: string,\n    config: WebhookConfig\n  ): Promise<any> {\n    const webhookData = {\n      description:\n        config.description || `inPatch Suporte - ${config.modelType} webhook`,\n      callbackURL: sanitizeString(callbackURL),\n      idModel: this.getConfig().trello.boardId,\n      active: true,\n    };\n\n    return this.makeEnhancedRequest('/webhooks', {\n      method: 'POST',\n      body: JSON.stringify(webhookData),\n    });\n  }\n\n  /**\n   * Clean up existing webhooks to avoid duplicates\n   */\n  private async cleanupExistingWebhooks(): Promise<void> {\n    try {\n      const existingWebhooks = await this.getWebhooks();\n      const inPatchWebhooks = existingWebhooks.filter(webhook =>\n        webhook.description?.includes('inPatch Suporte')\n      );\n\n      for (const webhook of inPatchWebhooks) {\n        try {\n          await this.deleteWebhook(webhook.id);\n          console.info(`Cleaned up existing webhook: ${webhook.id}`);\n        } catch (error) {\n          console.warn(`Failed to cleanup webhook ${webhook.id}:`, error);\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to cleanup existing webhooks:', error);\n    }\n  }\n\n  /**\n   * Get optimized board cards with field selection\n   */\n  async getOptimizedBoardCards(fields?: string[]): Promise<TrelloCard[]> {\n    const defaultFields = [\n      'id',\n      'name',\n      'desc',\n      'due',\n      'dateLastActivity',\n      'list',\n      'labels',\n      'members',\n      'badges',\n    ];\n\n    const selectedFields = fields || defaultFields;\n\n    let endpoint =\n      `/boards/${this.getConfig().trello.boardId}/cards?` +\n      `fields=${selectedFields.join(',')}&` +\n      'members=true&' +\n      'member_fields=fullName,username&' +\n      'labels=true&' +\n      'list=true&' +\n      'badges=true';\n\n    return this.makeEnhancedRequest(endpoint);\n  }\n\n  /**\n   * Get board cards with intelligent caching\n   */\n  async getCachedBoardCards(maxAge: number = 30000): Promise<TrelloCard[]> {\n    const cacheKey = 'board-cards';\n    const cached = this.getFromCache(cacheKey);\n\n    if (cached && Date.now() - cached.timestamp < maxAge) {\n      console.info('Returning cached board cards');\n\n      return cached.data;\n    }\n\n    const cards = await this.getOptimizedBoardCards();\n\n    this.setCache(cacheKey, cards);\n\n    return cards;\n  }\n\n  /**\n   * Simple in-memory cache implementation\n   */\n  private cache: Map<string, { data: any; timestamp: number }> = new Map();\n\n  private getFromCache(key: string): { data: any; timestamp: number } | null {\n    return this.cache.get(key) || null;\n  }\n\n  private setCache(key: string, data: any): void {\n    this.cache.set(key, { data, timestamp: Date.now() });\n\n    // Simple cache cleanup - remove entries older than 5 minutes\n    setTimeout(() => {\n      const entry = this.cache.get(key);\n\n      if (entry && Date.now() - entry.timestamp > 300000) {\n        this.cache.delete(key);\n      }\n    }, 300000);\n  }\n\n  /**\n   * Get API performance metrics\n   */\n  getMetrics(): APIMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get circuit breaker status\n   */\n  getCircuitBreakerStatus(): CircuitBreakerState {\n    return { ...this.circuitBreaker };\n  }\n\n  /**\n   * Get active webhooks\n   */\n  getActiveWebhooks(): Array<{ id: string; description: string }> {\n    return Array.from(this.activeWebhooks.entries()).map(([id, webhook]) => ({\n      id,\n      description: webhook.description || 'Unknown',\n    }));\n  }\n\n  /**\n   * Health check method\n   */\n  async healthCheck(): Promise<{\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    metrics: APIMetrics;\n    circuitBreaker: CircuitBreakerState;\n    lastCheck: string;\n  }> {\n    try {\n      const startTime = Date.now();\n\n      await this.makeEnhancedRequest('/members/me', {}, 0);\n      const responseTime = Date.now() - startTime;\n\n      let status: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n\n      if (this.circuitBreaker.state === 'open') {\n        status = 'unhealthy';\n      } else if (\n        responseTime > 5000 ||\n        this.metrics.failedRequests > this.metrics.successfulRequests * 0.1\n      ) {\n        status = 'degraded';\n      }\n\n      return {\n        status,\n        metrics: this.getMetrics(),\n        circuitBreaker: this.getCircuitBreakerStatus(),\n        lastCheck: new Date().toISOString(),\n      };\n    } catch (error) {\n      return {\n        status: 'unhealthy',\n        metrics: this.getMetrics(),\n        circuitBreaker: this.getCircuitBreakerStatus(),\n        lastCheck: new Date().toISOString(),\n      };\n    }\n  }\n\n  /**\n   * Reset metrics (useful for testing or periodic cleanup)\n   */\n  resetMetrics(): void {\n    this.metrics = {\n      totalRequests: 0,\n      successfulRequests: 0,\n      failedRequests: 0,\n      averageResponseTime: 0,\n      lastRequestTime: 0,\n    };\n  }\n\n  /**\n   * Get configuration (protected method access)\n   */\n  private getConfig() {\n    return getAPIConfig();\n  }\n\n  /**\n   * Enhanced card transformation with better error handling\n   */\n  transformCardsToProjectsEnhanced(cards: TrelloCard[]): Project[] {\n    const validCards = cards.filter(card => {\n      try {\n        // More robust validation\n        if (!card?.id || !card?.name) return false;\n        if (typeof card.name !== 'string' || card.name.trim() === '')\n          return false;\n\n        const name = card.name.toLowerCase();\n\n        if (\n          name.includes('template') ||\n          name.includes('exemplo') ||\n          name.includes('test')\n        ) {\n          return false;\n        }\n\n        return true;\n      } catch (error) {\n        console.warn('Error validating card:', card?.id, error);\n\n        return false;\n      }\n    });\n\n    return validCards.map(card => {\n      try {\n        return this.transformCardsToProjects([card])[0];\n      } catch (error) {\n        console.warn('Error transforming card:', card.id, error);\n\n        // Return a minimal valid project as fallback\n        return {\n          id: card.id,\n          title: sanitizeString(card.name || 'Untitled'),\n          description: '',\n          progress: 0,\n          platforms: ['Backoffice'] as Platform[],\n          responsible: ['Guilherme Souza'] as TeamMember[],\n          startDate: new Date().toISOString(),\n          estimatedEndDate: new Date(\n            Date.now() + 30 * 24 * 60 * 60 * 1000\n          ).toISOString(),\n          status: 'a-fazer' as const,\n          priority: 'medium' as const,\n          trelloCardId: card.id,\n          labels: [],\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        };\n      }\n    });\n  }\n}\n\n// Export enhanced instance\nexport const enhancedTrelloApi = new EnhancedTrelloAPI();\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\api\\webhook-handler.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":20,"suggestions":[{"fix":{"range":[3196,3246],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":187,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":187,"endColumn":21,"suggestions":[{"fix":{"range":[4481,4540],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":221,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":221,"endColumn":19,"suggestions":[{"fix":{"range":[5408,5464],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":19,"suggestions":[{"fix":{"range":[6554,6608],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":317,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":317,"endColumn":19,"suggestions":[{"fix":{"range":[8127,8179],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":331,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":331,"endColumn":17,"suggestions":[{"fix":{"range":[8513,8573],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":344,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":344,"endColumn":17,"suggestions":[{"fix":{"range":[8909,8969],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":377,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":377,"endColumn":19,"suggestions":[{"fix":{"range":[9937,9996],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_.*?$/u.","line":386,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":386,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'event' is defined but never used. Allowed unused args must match /^_.*?$/u.","line":404,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":404,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'changes' is defined but never used. Allowed unused args must match /^_.*?$/u.","line":479,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":479,"endColumn":42},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":493,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":493,"endColumn":23,"suggestions":[{"fix":{"range":[13109,13168],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":497,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":497,"endColumn":19,"suggestions":[{"fix":{"range":[13215,13289],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Project } from '@/types/project';\nimport { cacheService } from '@/lib/cache/cache-service';\nimport { enhancedTrelloApi } from '@/lib/api/trello-enhanced';\n\ninterface WebhookEvent {\n  action: {\n    id: string;\n    type: string;\n    date: string;\n    memberCreator: {\n      id: string;\n      fullName: string;\n      username: string;\n    };\n  };\n  model: {\n    id: string;\n    name: string;\n  };\n  data: {\n    board?: {\n      id: string;\n      name: string;\n    };\n    list?: {\n      id: string;\n      name: string;\n    };\n    card?: {\n      id: string;\n      name: string;\n      desc?: string;\n      due?: string;\n      closed?: boolean;\n    };\n    old?: {\n      name?: string;\n      desc?: string;\n      due?: string;\n      pos?: number;\n      closed?: boolean;\n    };\n  };\n}\n\ninterface WebhookProcessingResult {\n  success: boolean;\n  action: string;\n  cardId?: string;\n  projectsUpdated: number;\n  cacheInvalidated: boolean;\n  error?: string;\n  processingTime: number;\n}\n\ninterface WebhookStats {\n  totalProcessed: number;\n  successfulProcessed: number;\n  failedProcessed: number;\n  averageProcessingTime: number;\n  eventTypes: Record<string, number>;\n  lastProcessed: string;\n}\n\n/**\n * Advanced webhook handler for Trello events with intelligent processing\n * and real-time synchronization\n */\nexport class WebhookHandler {\n  private stats: WebhookStats = {\n    totalProcessed: 0,\n    successfulProcessed: 0,\n    failedProcessed: 0,\n    averageProcessingTime: 0,\n    eventTypes: {},\n    lastProcessed: new Date().toISOString(),\n  };\n\n  private processingQueue: Map<string, WebhookEvent> = new Map();\n  private isProcessing = false;\n  private subscribers: Set<(projects: Project[]) => void> = new Set();\n\n  /**\n   * Process incoming webhook event\n   */\n  async processWebhookEvent(\n    event: WebhookEvent\n  ): Promise<WebhookProcessingResult> {\n    const startTime = Date.now();\n    const eventType = event.action?.type || 'unknown';\n\n    // Update stats\n    this.stats.totalProcessed++;\n    this.stats.eventTypes[eventType] =\n      (this.stats.eventTypes[eventType] || 0) + 1;\n    this.stats.lastProcessed = new Date().toISOString();\n\n    try {\n      // Validate event\n      if (!this.isValidEvent(event)) {\n        throw new Error('Invalid webhook event structure');\n      }\n\n      // Add to processing queue to handle bursts\n      const eventId = `${event.action.id}-${Date.now()}`;\n\n      this.processingQueue.set(eventId, event);\n\n      // Process the event\n      const result = await this.handleEventByType(event);\n\n      // Remove from queue\n      this.processingQueue.delete(eventId);\n\n      // Update success stats\n      this.stats.successfulProcessed++;\n      const processingTime = Date.now() - startTime;\n\n      this.updateAverageProcessingTime(processingTime);\n\n      return {\n        success: true,\n        action: eventType,\n        cardId: event.data.card?.id,\n        projectsUpdated: result.projectsUpdated,\n        cacheInvalidated: result.cacheInvalidated,\n        processingTime,\n      };\n    } catch (error) {\n      this.stats.failedProcessed++;\n      const processingTime = Date.now() - startTime;\n\n      this.updateAverageProcessingTime(processingTime);\n\n      console.error('Webhook processing error:', error);\n\n      return {\n        success: false,\n        action: eventType,\n        cardId: event.data.card?.id,\n        projectsUpdated: 0,\n        cacheInvalidated: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        processingTime,\n      };\n    }\n  }\n\n  /**\n   * Handle event based on its type\n   */\n  private async handleEventByType(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    const eventType = event.action.type;\n\n    switch (eventType) {\n      case 'createCard':\n        return this.handleCardCreated(event);\n\n      case 'updateCard':\n        return this.handleCardUpdated(event);\n\n      case 'deleteCard':\n        return this.handleCardDeleted(event);\n\n      case 'moveCard':\n        return this.handleCardMoved(event);\n\n      case 'commentCard':\n        return this.handleCardCommented(event);\n\n      case 'addAttachmentToCard':\n        return this.handleAttachmentAdded(event);\n\n      case 'updateCheckItemStateOnCard':\n        return this.handleChecklistUpdated(event);\n\n      case 'updateList':\n        return this.handleListUpdated(event);\n\n      case 'createList':\n        return this.handleListCreated(event);\n\n      default:\n        console.info(`Unhandled webhook event type: ${eventType}`);\n\n        return { projectsUpdated: 0, cacheInvalidated: false };\n    }\n  }\n\n  /**\n   * Handle card creation\n   */\n  private async handleCardCreated(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    const cardId = event.data.card?.id;\n\n    if (!cardId) return { projectsUpdated: 0, cacheInvalidated: false };\n\n    try {\n      // Fetch the new card details\n      const card = await enhancedTrelloApi.getCard(cardId);\n      const projects = enhancedTrelloApi.transformCardsToProjectsEnhanced([\n        card,\n      ]);\n\n      if (projects.length > 0) {\n        // Invalidate cache to force refresh\n        await cacheService.invalidateProjects();\n\n        // Notify subscribers\n        await this.notifySubscribers();\n\n        return { projectsUpdated: 1, cacheInvalidated: true };\n      }\n    } catch (error) {\n      console.warn('Failed to process card creation:', error);\n    }\n\n    return { projectsUpdated: 0, cacheInvalidated: false };\n  }\n\n  /**\n   * Handle card updates\n   */\n  private async handleCardUpdated(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    const cardId = event.data.card?.id;\n\n    if (!cardId) return { projectsUpdated: 0, cacheInvalidated: false };\n\n    try {\n      // Check what changed\n      const changes = this.detectCardChanges(event);\n\n      if (changes.length === 0) {\n        return { projectsUpdated: 0, cacheInvalidated: false };\n      }\n\n      // Fetch updated card details\n      const card = await enhancedTrelloApi.getCard(cardId);\n      const projects = enhancedTrelloApi.transformCardsToProjectsEnhanced([\n        card,\n      ]);\n\n      if (projects.length > 0) {\n        // Invalidate specific cache entries\n        await cacheService.invalidateByWebhookEvent(event);\n\n        // Notify subscribers with change details\n        await this.notifySubscribers(changes);\n\n        return { projectsUpdated: 1, cacheInvalidated: true };\n      }\n    } catch (error) {\n      console.warn('Failed to process card update:', error);\n    }\n\n    return { projectsUpdated: 0, cacheInvalidated: false };\n  }\n\n  /**\n   * Handle card deletion\n   */\n  private async handleCardDeleted(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    const cardId = event.data.card?.id;\n\n    if (!cardId) return { projectsUpdated: 0, cacheInvalidated: false };\n\n    // Invalidate cache entries for deleted card\n    await cacheService.invalidateByPattern(`.*${cardId}.*`);\n    await cacheService.invalidateProjects();\n\n    // Notify subscribers\n    await this.notifySubscribers(['card_deleted']);\n\n    return { projectsUpdated: 0, cacheInvalidated: true };\n  }\n\n  /**\n   * Handle card moved between lists\n   */\n  private async handleCardMoved(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    const cardId = event.data.card?.id;\n\n    if (!cardId) return { projectsUpdated: 0, cacheInvalidated: false };\n\n    try {\n      // Fetch updated card to get new list/status\n      const card = await enhancedTrelloApi.getCard(cardId);\n      const projects = enhancedTrelloApi.transformCardsToProjectsEnhanced([\n        card,\n      ]);\n\n      if (projects.length > 0) {\n        // Invalidate cache as status likely changed\n        await cacheService.invalidateProjects();\n\n        // Notify subscribers about status change\n        await this.notifySubscribers(['status_changed']);\n\n        return { projectsUpdated: 1, cacheInvalidated: true };\n      }\n    } catch (error) {\n      console.warn('Failed to process card move:', error);\n    }\n\n    return { projectsUpdated: 0, cacheInvalidated: false };\n  }\n\n  /**\n   * Handle card comments (low priority)\n   */\n  private async handleCardCommented(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    // Comments don't affect our project data, so minimal processing\n    console.info('Card comment received:', event.data.card?.id);\n\n    return { projectsUpdated: 0, cacheInvalidated: false };\n  }\n\n  /**\n   * Handle attachment added (low priority)\n   */\n  private async handleAttachmentAdded(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    // Attachments don't affect our project data, so minimal processing\n    console.info('Card attachment added:', event.data.card?.id);\n\n    return { projectsUpdated: 0, cacheInvalidated: false };\n  }\n\n  /**\n   * Handle checklist item updates (affects progress)\n   */\n  private async handleChecklistUpdated(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    const cardId = event.data.card?.id;\n\n    if (!cardId) return { projectsUpdated: 0, cacheInvalidated: false };\n\n    try {\n      // Fetch updated card to recalculate progress\n      const card = await enhancedTrelloApi.getCard(cardId);\n      const projects = enhancedTrelloApi.transformCardsToProjectsEnhanced([\n        card,\n      ]);\n\n      if (projects.length > 0) {\n        // Invalidate cache as progress changed\n        await cacheService.invalidateByPattern(`.*${cardId}.*`);\n\n        // Notify subscribers about progress change\n        await this.notifySubscribers(['progress_changed']);\n\n        return { projectsUpdated: 1, cacheInvalidated: true };\n      }\n    } catch (error) {\n      console.warn('Failed to process checklist update:', error);\n    }\n\n    return { projectsUpdated: 0, cacheInvalidated: false };\n  }\n\n  /**\n   * Handle list updates\n   */\n  private async handleListUpdated(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    // List changes might affect status mapping\n    await cacheService.invalidateByPattern('trello-board-lists');\n\n    // Might need to refresh all projects if list names changed\n    await cacheService.invalidateProjects();\n\n    await this.notifySubscribers(['list_updated']);\n\n    return { projectsUpdated: 0, cacheInvalidated: true };\n  }\n\n  /**\n   * Handle list creation\n   */\n  private async handleListCreated(event: WebhookEvent): Promise<{\n    projectsUpdated: number;\n    cacheInvalidated: boolean;\n  }> {\n    // New list created, invalidate lists cache\n    await cacheService.invalidateByPattern('trello-board-lists');\n\n    await this.notifySubscribers(['list_created']);\n\n    return { projectsUpdated: 0, cacheInvalidated: true };\n  }\n\n  /**\n   * Detect what changed in a card update\n   */\n  private detectCardChanges(event: WebhookEvent): string[] {\n    const changes: string[] = [];\n    const old = event.data.old;\n    const current = event.data.card;\n\n    if (!old || !current) return changes;\n\n    if (old.name !== current.name) changes.push('title_changed');\n    if (old.desc !== current.desc) changes.push('description_changed');\n    if (old.due !== current.due) changes.push('due_date_changed');\n    if (old.closed !== current.closed) changes.push('archived_changed');\n    if (old.pos !== undefined) changes.push('position_changed');\n\n    return changes;\n  }\n\n  /**\n   * Validate webhook event structure\n   */\n  private isValidEvent(event: WebhookEvent): boolean {\n    return !!(\n      event &&\n      event.action &&\n      event.action.type &&\n      event.action.id &&\n      event.data\n    );\n  }\n\n  /**\n   * Update average processing time\n   */\n  private updateAverageProcessingTime(newTime: number): void {\n    const totalProcessed =\n      this.stats.successfulProcessed + this.stats.failedProcessed;\n\n    if (totalProcessed === 1) {\n      this.stats.averageProcessingTime = newTime;\n    } else {\n      this.stats.averageProcessingTime =\n        (this.stats.averageProcessingTime * (totalProcessed - 1) + newTime) /\n        totalProcessed;\n    }\n  }\n\n  /**\n   * Subscribe to webhook events\n   */\n  subscribe(callback: (projects: Project[]) => void): () => void {\n    this.subscribers.add(callback);\n\n    // Return unsubscribe function\n    return () => {\n      this.subscribers.delete(callback);\n    };\n  }\n\n  /**\n   * Notify all subscribers\n   */\n  private async notifySubscribers(changes?: string[]): Promise<void> {\n    if (this.subscribers.size === 0) return;\n\n    try {\n      // Fetch fresh projects data\n      const cards = await enhancedTrelloApi.getCachedBoardCards(10000); // 10 second cache\n      const projects =\n        enhancedTrelloApi.transformCardsToProjectsEnhanced(cards);\n\n      // Notify all subscribers\n      for (const callback of this.subscribers) {\n        try {\n          callback(projects);\n        } catch (error) {\n          console.warn('Error notifying webhook subscriber:', error);\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to fetch projects for webhook notification:', error);\n    }\n  }\n\n  /**\n   * Process queued events (for handling bursts)\n   */\n  async processQueue(): Promise<void> {\n    if (this.isProcessing || this.processingQueue.size === 0) return;\n\n    this.isProcessing = true;\n\n    try {\n      const events = Array.from(this.processingQueue.values());\n      const batchSize = 5;\n\n      for (let i = 0; i < events.length; i += batchSize) {\n        const batch = events.slice(i, i + batchSize);\n\n        await Promise.allSettled(\n          batch.map(event => this.processWebhookEvent(event))\n        );\n\n        // Small delay between batches\n        if (i + batchSize < events.length) {\n          await new Promise(resolve => setTimeout(resolve, 100));\n        }\n      }\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  /**\n   * Get webhook processing statistics\n   */\n  getStats(): WebhookStats {\n    return { ...this.stats };\n  }\n\n  /**\n   * Reset statistics\n   */\n  resetStats(): void {\n    this.stats = {\n      totalProcessed: 0,\n      successfulProcessed: 0,\n      failedProcessed: 0,\n      averageProcessingTime: 0,\n      eventTypes: {},\n      lastProcessed: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Get health status\n   */\n  getHealthStatus(): {\n    status: 'healthy' | 'degraded' | 'unhealthy';\n    queueSize: number;\n    successRate: number;\n    averageProcessingTime: number;\n    lastProcessed: string;\n  } {\n    const successRate =\n      this.stats.totalProcessed > 0\n        ? (this.stats.successfulProcessed / this.stats.totalProcessed) * 100\n        : 100;\n\n    let status: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n\n    if (successRate < 50 || this.processingQueue.size > 50) {\n      status = 'unhealthy';\n    } else if (\n      successRate < 80 ||\n      this.processingQueue.size > 20 ||\n      this.stats.averageProcessingTime > 5000\n    ) {\n      status = 'degraded';\n    }\n\n    return {\n      status,\n      queueSize: this.processingQueue.size,\n      successRate,\n      averageProcessingTime: this.stats.averageProcessingTime,\n      lastProcessed: this.stats.lastProcessed,\n    };\n  }\n}\n\n// Export singleton instance\nexport const webhookHandler = new WebhookHandler();\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\cache\\cache-service.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'NodeJS' is not defined.","line":48,"column":25,"nodeType":"Identifier","messageId":"undef","endLine":48,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Project } from '@/types/project';\n\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n  ttl: number;\n  hits: number;\n  lastAccessed: number;\n}\n\ninterface CacheStats {\n  totalEntries: number;\n  totalHits: number;\n  totalMisses: number;\n  hitRate: number;\n  memoryUsage: number;\n  oldestEntry: number;\n  newestEntry: number;\n}\n\ninterface CacheConfig {\n  maxSize: number;\n  defaultTTL: number;\n  cleanupInterval: number;\n  enableStats: boolean;\n}\n\n/**\n * Intelligent cache service with TTL, LRU eviction, and automatic cleanup\n * Optimized for Trello API responses and project data\n */\nexport class CacheService {\n  private cache: Map<string, CacheEntry<any>> = new Map();\n  private stats = {\n    hits: 0,\n    misses: 0,\n    evictions: 0,\n    cleanups: 0,\n  };\n\n  private config: CacheConfig = {\n    maxSize: 1000,\n    defaultTTL: 300000, // 5 minutes\n    cleanupInterval: 60000, // 1 minute\n    enableStats: true,\n  };\n\n  private cleanupTimer: NodeJS.Timeout | null = null;\n\n  constructor(config?: Partial<CacheConfig>) {\n    this.config = { ...this.config, ...config };\n    this.startCleanupTimer();\n  }\n\n  /**\n   * Get cached projects with intelligent freshness check\n   */\n  async getCachedProjects(maxAge?: number): Promise<Project[] | null> {\n    const key = 'trello-projects';\n    const ttl = maxAge || this.config.defaultTTL;\n\n    return this.get<Project[]>(key, ttl);\n  }\n\n  /**\n   * Set cached projects with metadata\n   */\n  async setCachedProjects(projects: Project[], ttl?: number): Promise<void> {\n    const key = 'trello-projects';\n    const cacheTime = ttl || this.config.defaultTTL;\n\n    this.set(key, projects, cacheTime);\n\n    // Also cache individual projects for quick lookup\n    projects.forEach(project => {\n      if (project.id) {\n        this.set(`project-${project.id}`, project, cacheTime);\n      }\n      if (project.trelloCardId) {\n        this.set(`trello-card-${project.trelloCardId}`, project, cacheTime);\n      }\n    });\n  }\n\n  /**\n   * Get cached project by ID\n   */\n  async getCachedProject(projectId: string): Promise<Project | null> {\n    return this.get<Project>(`project-${projectId}`);\n  }\n\n  /**\n   * Get cached project by Trello card ID\n   */\n  async getCachedProjectByTrelloId(\n    trelloCardId: string\n  ): Promise<Project | null> {\n    return this.get<Project>(`trello-card-${trelloCardId}`);\n  }\n\n  /**\n   * Cache Trello board lists\n   */\n  async setCachedBoardLists(lists: any[], ttl?: number): Promise<void> {\n    const cacheTime = ttl || this.config.defaultTTL;\n\n    this.set('trello-board-lists', lists, cacheTime);\n  }\n\n  /**\n   * Get cached board lists\n   */\n  async getCachedBoardLists(): Promise<any[] | null> {\n    return this.get<any[]>('trello-board-lists');\n  }\n\n  /**\n   * Cache board actions for change detection\n   */\n  async setCachedBoardActions(actions: any[], ttl?: number): Promise<void> {\n    const cacheTime = ttl || this.config.defaultTTL / 2; // Shorter TTL for actions\n\n    this.set('trello-board-actions', actions, cacheTime);\n  }\n\n  /**\n   * Get cached board actions\n   */\n  async getCachedBoardActions(): Promise<any[] | null> {\n    return this.get<any[]>('trello-board-actions');\n  }\n\n  /**\n   * Generic get method with TTL check\n   */\n  private get<T>(key: string, maxAge?: number): T | null {\n    const entry = this.cache.get(key);\n\n    if (!entry) {\n      this.stats.misses++;\n\n      return null;\n    }\n\n    const now = Date.now();\n    const age = now - entry.timestamp;\n    const ttl = maxAge || entry.ttl;\n\n    if (age > ttl) {\n      this.cache.delete(key);\n      this.stats.misses++;\n\n      return null;\n    }\n\n    // Update access statistics\n    entry.hits++;\n    entry.lastAccessed = now;\n    this.stats.hits++;\n\n    return entry.data as T;\n  }\n\n  /**\n   * Generic set method with TTL and size management\n   */\n  private set<T>(key: string, data: T, ttl?: number): void {\n    const now = Date.now();\n    const cacheTime = ttl || this.config.defaultTTL;\n\n    // Check if we need to evict entries\n    if (this.cache.size >= this.config.maxSize) {\n      this.evictLRU();\n    }\n\n    const entry: CacheEntry<T> = {\n      data,\n      timestamp: now,\n      ttl: cacheTime,\n      hits: 0,\n      lastAccessed: now,\n    };\n\n    this.cache.set(key, entry);\n  }\n\n  /**\n   * Evict least recently used entry\n   */\n  private evictLRU(): void {\n    let oldestKey = '';\n    let oldestTime = Date.now();\n\n    for (const [key, entry] of this.cache.entries()) {\n      if (entry.lastAccessed < oldestTime) {\n        oldestTime = entry.lastAccessed;\n        oldestKey = key;\n      }\n    }\n\n    if (oldestKey) {\n      this.cache.delete(oldestKey);\n      this.stats.evictions++;\n    }\n  }\n\n  /**\n   * Invalidate specific cache entries\n   */\n  async invalidateProjects(): Promise<void> {\n    const keysToDelete: string[] = [];\n\n    for (const key of this.cache.keys()) {\n      if (\n        key.startsWith('trello-projects') ||\n        key.startsWith('project-') ||\n        key.startsWith('trello-card-')\n      ) {\n        keysToDelete.push(key);\n      }\n    }\n\n    keysToDelete.forEach(key => this.cache.delete(key));\n  }\n\n  /**\n   * Invalidate all cache entries\n   */\n  async invalidateAll(): Promise<void> {\n    this.cache.clear();\n  }\n\n  /**\n   * Invalidate entries by pattern\n   */\n  async invalidateByPattern(pattern: string): Promise<void> {\n    const keysToDelete: string[] = [];\n    const regex = new RegExp(pattern);\n\n    for (const key of this.cache.keys()) {\n      if (regex.test(key)) {\n        keysToDelete.push(key);\n      }\n    }\n\n    keysToDelete.forEach(key => this.cache.delete(key));\n  }\n\n  /**\n   * Smart invalidation based on Trello webhook events\n   */\n  async invalidateByWebhookEvent(event: any): Promise<void> {\n    const { action, data } = event;\n\n    switch (action?.type) {\n      case 'createCard':\n      case 'updateCard':\n      case 'deleteCard':\n        // Invalidate projects cache and specific card cache\n        await this.invalidateProjects();\n        if (data?.card?.id) {\n          this.cache.delete(`trello-card-${data.card.id}`);\n        }\n        break;\n\n      case 'moveCard':\n        // Invalidate projects cache as status might have changed\n        await this.invalidateProjects();\n        break;\n\n      case 'updateList':\n      case 'createList':\n        // Invalidate board lists cache\n        this.cache.delete('trello-board-lists');\n        break;\n\n      case 'commentCard':\n      case 'addAttachmentToCard':\n        // These don't affect our project data, so no invalidation needed\n        break;\n\n      default:\n        // For unknown events, invalidate projects to be safe\n        await this.invalidateProjects();\n    }\n  }\n\n  /**\n   * Preload cache with fresh data\n   */\n  async preloadCache(\n    projects: Project[],\n    lists?: any[],\n    actions?: any[]\n  ): Promise<void> {\n    await this.setCachedProjects(projects);\n\n    if (lists) {\n      await this.setCachedBoardLists(lists);\n    }\n\n    if (actions) {\n      await this.setCachedBoardActions(actions);\n    }\n  }\n\n  /**\n   * Get cache statistics\n   */\n  getStats(): CacheStats {\n    const entries = Array.from(this.cache.values());\n    const now = Date.now();\n\n    const totalHits = this.stats.hits;\n    const totalMisses = this.stats.misses;\n    const totalRequests = totalHits + totalMisses;\n\n    return {\n      totalEntries: this.cache.size,\n      totalHits,\n      totalMisses,\n      hitRate: totalRequests > 0 ? (totalHits / totalRequests) * 100 : 0,\n      memoryUsage: this.estimateMemoryUsage(),\n      oldestEntry:\n        entries.length > 0 ? Math.min(...entries.map(e => e.timestamp)) : now,\n      newestEntry:\n        entries.length > 0 ? Math.max(...entries.map(e => e.timestamp)) : now,\n    };\n  }\n\n  /**\n   * Estimate memory usage (rough calculation)\n   */\n  private estimateMemoryUsage(): number {\n    let size = 0;\n\n    for (const [key, entry] of this.cache.entries()) {\n      // Rough estimation: key size + JSON string size of data\n      size += key.length * 2; // UTF-16 characters\n      size += JSON.stringify(entry.data).length * 2;\n      size += 64; // Overhead for entry metadata\n    }\n\n    return size;\n  }\n\n  /**\n   * Start automatic cleanup timer\n   */\n  private startCleanupTimer(): void {\n    this.cleanupTimer = setInterval(() => {\n      this.cleanup();\n    }, this.config.cleanupInterval);\n  }\n\n  /**\n   * Cleanup expired entries\n   */\n  private cleanup(): void {\n    const now = Date.now();\n    const keysToDelete: string[] = [];\n\n    for (const [key, entry] of this.cache.entries()) {\n      const age = now - entry.timestamp;\n\n      if (age > entry.ttl) {\n        keysToDelete.push(key);\n      }\n    }\n\n    keysToDelete.forEach(key => this.cache.delete(key));\n\n    if (keysToDelete.length > 0) {\n      this.stats.cleanups++;\n    }\n  }\n\n  /**\n   * Stop cleanup timer and clear cache\n   */\n  destroy(): void {\n    if (this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = null;\n    }\n    this.cache.clear();\n  }\n\n  /**\n   * Check if cache is healthy\n   */\n  isHealthy(): boolean {\n    const stats = this.getStats();\n\n    // Consider cache healthy if:\n    // - Hit rate is above 50% (if we have enough requests)\n    // - Memory usage is reasonable\n    // - Not too many entries\n    const totalRequests = stats.totalHits + stats.totalMisses;\n\n    if (totalRequests < 10) return true; // Not enough data to judge\n\n    return (\n      stats.hitRate > 50 &&\n      stats.memoryUsage < 50 * 1024 * 1024 && // 50MB\n      stats.totalEntries < this.config.maxSize * 0.9\n    );\n  }\n\n  /**\n   * Get cache configuration\n   */\n  getConfig(): CacheConfig {\n    return { ...this.config };\n  }\n\n  /**\n   * Update cache configuration\n   */\n  updateConfig(newConfig: Partial<CacheConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n\n    // Restart cleanup timer if interval changed\n    if (newConfig.cleanupInterval && this.cleanupTimer) {\n      clearInterval(this.cleanupTimer);\n      this.startCleanupTimer();\n    }\n  }\n}\n\n// Export singleton instance\nexport const cacheService = new CacheService({\n  maxSize: 500,\n  defaultTTL: 300000, // 5 minutes\n  cleanupInterval: 60000, // 1 minute\n  enableStats: true,\n});\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\config\\api.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":23,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":23,"endColumn":19,"suggestions":[{"fix":{"range":[553,618],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// API Configuration with security best practices\nexport interface APIConfig {\n  trello: {\n    apiKey: string | null;\n    apiToken: string | null;\n    boardId: string;\n    baseUrl: string;\n  };\n  supabase: {\n    url: string | null;\n    anonKey: string | null;\n  };\n}\n\n// Validate environment variables\nfunction validateEnvVar(\n  name: string,\n  value: string | undefined\n): string | null {\n  if (!value || value.trim() === '') {\n    // Environment variable not set - handle silently in production\n    if (process.env.NODE_ENV === 'development') {\n      console.warn(`Environment variable ${name} is not set or empty`);\n    }\n\n    return null;\n  }\n\n  return value.trim();\n}\n\n// Get API configuration with validation\nexport function getAPIConfig(): APIConfig {\n  return {\n    trello: {\n      apiKey: validateEnvVar(\n        'NEXT_PUBLIC_TRELLO_API_KEY',\n        process.env.NEXT_PUBLIC_TRELLO_API_KEY\n      ),\n      apiToken: validateEnvVar(\n        'NEXT_PUBLIC_TRELLO_API_TOKEN',\n        process.env.NEXT_PUBLIC_TRELLO_API_TOKEN\n      ),\n      boardId: process.env.NEXT_PUBLIC_TRELLO_BOARD_ID || 'RVFcbKeF',\n      baseUrl: 'https://api.trello.com/1',\n    },\n    supabase: {\n      url: validateEnvVar(\n        'NEXT_PUBLIC_SUPABASE_URL',\n        process.env.NEXT_PUBLIC_SUPABASE_URL\n      ),\n      anonKey: validateEnvVar(\n        'NEXT_PUBLIC_SUPABASE_ANON_KEY',\n        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY\n      ),\n    },\n  };\n}\n\n// Check if Trello is properly configured\nexport function isTrelloConfigured(): boolean {\n  const config = getAPIConfig();\n\n  return !!(config.trello.apiKey && config.trello.apiToken);\n}\n\n// Check if Supabase is properly configured\nexport function isSupabaseConfigured(): boolean {\n  const config = getAPIConfig();\n\n  return !!(config.supabase.url && config.supabase.anonKey);\n}\n\n// Rate limiting configuration\nexport const RATE_LIMITS = {\n  trello: {\n    requestsPerSecond: 10,\n    requestsPerMinute: 300,\n    burstLimit: 50,\n  },\n  supabase: {\n    requestsPerSecond: 50,\n    requestsPerMinute: 1000,\n    burstLimit: 100,\n  },\n} as const;\n\n// API endpoints\nexport const API_ENDPOINTS = {\n  trello: {\n    boards: (boardId: string) => `/boards/${boardId}`,\n    cards: (boardId: string) => `/boards/${boardId}/cards`,\n    lists: (boardId: string) => `/boards/${boardId}/lists`,\n    actions: (boardId: string) => `/boards/${boardId}/actions`,\n    webhooks: '/webhooks',\n  },\n} as const;\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\database\\prisma.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":62,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":84,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":132,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":132,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":150,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":163,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":189,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":189,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":217,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":217,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":261,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":261,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":302,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":302,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":315,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":315,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":342,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":342,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":361,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":361,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":380,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":380,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":406,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":429,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":429,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":499,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":499,"endColumn":20,"suggestions":[{"fix":{"range":[12868,12931],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":587,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":587,"endColumn":18,"suggestions":[{"fix":{"range":[15529,15651],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":593,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":593,"endColumn":20,"suggestions":[{"fix":{"range":[15703,15762],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Usando tipos mock temporários até o Prisma Client ser gerado\nimport type { Project, SyncHistory } from '@/lib/types/prisma-mock';\nimport type { Project as TrelloProject } from '@/types/project';\n\nimport {\n  PrismaClient,\n  ProjectStatus,\n  ProjectPriority,\n  Platform,\n  TeamMember,\n  SyncAction,\n} from '@/lib/types/prisma-mock';\nimport {\n  supabaseMCPService,\n  type ProjectAnalytics,\n} from '@/lib/services/supabase-mcp';\n\n// Extend Prisma types for better type safety\nexport type ProjectWithHistory = Project & {\n  syncHistory: SyncHistory[];\n};\n\nexport type CreateProjectData = Omit<Project, 'id' | 'createdAt' | 'updatedAt'>;\nexport type UpdateProjectData = Partial<CreateProjectData>;\n\n// Global Prisma instance following Next.js best practices\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: ['query', 'error', 'warn'],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n\n/**\n * DatabaseService - Serviço principal para operações de banco de dados\n * Implementa padrões de Vibe Coding com type safety e error handling\n * Integrado com Supabase MCP para operações avançadas\n */\nexport class DatabaseService {\n  private prisma: PrismaClient;\n  private mcpService = supabaseMCPService;\n  private isInitialized = false;\n\n  constructor() {\n    this.prisma = prisma;\n  }\n\n  /**\n   * Inicializa serviços MCP\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      await this.mcpService.initialize();\n      this.isInitialized = true;\n    } catch (error) {\n      // MCP não disponível, usando modo fallback silentemente\n      this.isInitialized = true; // Continue sem MCP\n    }\n  }\n\n  /**\n   * Busca todos os projetos com histórico de sincronização\n   */\n  async getProjects(): Promise<ProjectWithHistory[]> {\n    await this.initialize();\n\n    try {\n      return await this.prisma.project.findMany({\n        include: {\n          syncHistory: {\n            orderBy: { timestamp: 'desc' },\n            take: 5, // Últimas 5 sincronizações\n          },\n        },\n        orderBy: { updatedAt: 'desc' },\n      });\n    } catch (error) {\n      throw new Error('Falha ao carregar projetos do banco de dados');\n    }\n  }\n\n  /**\n   * Busca projetos com filtros avançados via MCP\n   */\n  async getProjectsWithFilters(filters: {\n    status?: ProjectStatus[];\n    priority?: ProjectPriority[];\n    platforms?: Platform[];\n    responsible?: TeamMember[];\n    dateRange?: { start: string; end: string };\n    searchTerm?: string;\n  }): Promise<Project[]> {\n    await this.initialize();\n\n    try {\n      if (this.mcpService.getConnectionStatus().connected) {\n        return await this.mcpService.getProjectsWithAdvancedFilters(filters);\n      }\n\n      // Fallback para Prisma nativo\n      const where: any = {};\n\n      if (filters.status?.length) {\n        where.status = { in: filters.status };\n      }\n\n      if (filters.priority?.length) {\n        where.priority = { in: filters.priority };\n      }\n\n      if (filters.searchTerm) {\n        where.OR = [\n          { title: { contains: filters.searchTerm, mode: 'insensitive' } },\n          {\n            description: { contains: filters.searchTerm, mode: 'insensitive' },\n          },\n        ];\n      }\n\n      return await this.prisma.project.findMany({\n        where,\n        orderBy: { updatedAt: 'desc' },\n        take: 100,\n      });\n    } catch (error) {\n      throw new Error('Falha ao buscar projetos filtrados');\n    }\n  }\n\n  /**\n   * Busca projeto por ID\n   */\n  async getProjectById(id: string): Promise<ProjectWithHistory | null> {\n    try {\n      return await this.prisma.project.findUnique({\n        where: { id },\n        include: {\n          syncHistory: {\n            orderBy: { timestamp: 'desc' },\n          },\n        },\n      });\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Busca projeto por Trello Card ID\n   */\n  async getProjectByTrelloId(trelloCardId: string): Promise<Project | null> {\n    try {\n      return await this.prisma.project.findUnique({\n        where: { trelloCardId },\n      });\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Cria novo projeto\n   */\n  async createProject(\n    data: CreateProjectData,\n    source: string = 'manual'\n  ): Promise<Project> {\n    try {\n      return await this.prisma.project.create({\n        data: {\n          ...data,\n          syncHistory: {\n            create: {\n              action: 'CREATED',\n              source,\n              success: true,\n              details: { message: 'Projeto criado com sucesso' },\n            },\n          },\n        },\n      });\n    } catch (error) {\n      throw new Error('Falha ao criar projeto no banco de dados');\n    }\n  }\n\n  /**\n   * Atualiza projeto existente\n   */\n  async updateProject(\n    id: string,\n    data: UpdateProjectData,\n    source: string = 'manual'\n  ): Promise<Project> {\n    try {\n      return await this.prisma.project.update({\n        where: { id },\n        data: {\n          ...data,\n          syncHistory: {\n            create: {\n              action: 'UPDATED',\n              source,\n              success: true,\n              details: { changes: Object.keys(data) },\n            },\n          },\n        },\n      });\n    } catch (error) {\n      throw new Error('Falha ao atualizar projeto no banco de dados');\n    }\n  }\n\n  /**\n   * Upsert de projeto (create ou update baseado no trelloCardId)\n   */\n  async upsertProject(\n    data: CreateProjectData,\n    source: string = 'trello'\n  ): Promise<Project> {\n    try {\n      const { trelloCardId, ...projectData } = data;\n\n      if (!trelloCardId) {\n        throw new Error('trelloCardId é obrigatório para upsert');\n      }\n\n      return await this.prisma.project.upsert({\n        where: { trelloCardId },\n        update: {\n          ...projectData,\n          syncHistory: {\n            create: {\n              action: 'UPDATED',\n              source,\n              success: true,\n              details: { trelloCardId },\n            },\n          },\n        },\n        create: {\n          ...data,\n          syncHistory: {\n            create: {\n              action: 'CREATED',\n              source,\n              success: true,\n              details: { trelloCardId },\n            },\n          },\n        },\n      });\n    } catch (error) {\n      throw new Error('Falha ao sincronizar projeto com banco de dados');\n    }\n  }\n\n  /**\n   * Sincronização em lote de projetos do Trello\n   */\n  async syncFromTrello(trelloProjects: CreateProjectData[]): Promise<void> {\n    try {\n      await this.prisma.$transaction(async tx => {\n        for (const project of trelloProjects) {\n          if (!project.trelloCardId) continue;\n\n          await tx.project.upsert({\n            where: { trelloCardId: project.trelloCardId },\n            update: {\n              ...project,\n              syncHistory: {\n                create: {\n                  action: 'SYNCED',\n                  source: 'trello',\n                  success: true,\n                  details: { batchSync: true },\n                },\n              },\n            },\n            create: {\n              ...project,\n              syncHistory: {\n                create: {\n                  action: 'CREATED',\n                  source: 'trello',\n                  success: true,\n                  details: { batchSync: true },\n                },\n              },\n            },\n          });\n        }\n      });\n    } catch (error) {\n      throw new Error('Falha na sincronização em lote com Trello');\n    }\n  }\n\n  /**\n   * Remove projeto\n   */\n  async deleteProject(id: string): Promise<void> {\n    try {\n      await this.prisma.project.delete({\n        where: { id },\n      });\n    } catch (error) {\n      throw new Error('Falha ao deletar projeto do banco de dados');\n    }\n  }\n\n  /**\n   * Estatísticas dos projetos (com MCP analytics)\n   */\n  async getProjectStats() {\n    await this.initialize();\n\n    try {\n      const [total, inProgress, completed, avgProgress] = await Promise.all([\n        this.prisma.project.count(),\n        this.prisma.project.count({ where: { status: 'EM_ANDAMENTO' } }),\n        this.prisma.project.count({ where: { status: 'CONCLUIDO' } }),\n        this.prisma.project.aggregate({\n          _avg: { progress: true },\n        }),\n      ]);\n\n      return {\n        total,\n        inProgress,\n        completed,\n        avgProgress: Math.round(avgProgress._avg.progress || 0),\n      };\n    } catch (error) {\n      return { total: 0, inProgress: 0, completed: 0, avgProgress: 0 };\n    }\n  }\n\n  /**\n   * Analytics avançados via MCP\n   */\n  async getAdvancedAnalytics(\n    period: 'week' | 'month' | 'quarter' = 'month'\n  ): Promise<ProjectAnalytics | null> {\n    await this.initialize();\n\n    try {\n      if (this.mcpService.getConnectionStatus().connected) {\n        return await this.mcpService.getProjectAnalytics(period);\n      }\n\n      return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Histórico de sincronização\n   */\n  async getSyncHistory(limit: number = 50): Promise<SyncHistory[]> {\n    try {\n      return await this.prisma.syncHistory.findMany({\n        include: {\n          project: {\n            select: { title: true, trelloCardId: true },\n          },\n        },\n        orderBy: { timestamp: 'desc' },\n        take: limit,\n      });\n    } catch (error) {\n      return [];\n    }\n  }\n\n  /**\n   * Registra erro de sincronização\n   */\n  async logSyncError(\n    projectId: string | null,\n    action: SyncAction,\n    source: string,\n    errorMessage: string,\n    details?: any\n  ): Promise<void> {\n    try {\n      await this.prisma.syncHistory.create({\n        data: {\n          projectId: projectId || 'unknown',\n          action,\n          source,\n          success: false,\n          errorMessage,\n          details,\n        },\n      });\n    } catch (error) {\n      // Erro ao registrar erro de sincronização - falha silenciosa\n    }\n  }\n\n  /**\n   * Cleanup de histórico antigo\n   */\n  async cleanupOldHistory(daysOld: number = 30): Promise<number> {\n    try {\n      const cutoffDate = new Date();\n\n      cutoffDate.setDate(cutoffDate.getDate() - daysOld);\n\n      const result = await this.prisma.syncHistory.deleteMany({\n        where: {\n          timestamp: {\n            lt: cutoffDate,\n          },\n        },\n      });\n\n      return result.count;\n    } catch (error) {\n      return 0;\n    }\n  }\n\n  /**\n   * Transforma projeto do Trello para formato Prisma\n   */\n  transformTrelloToProject(trelloProject: TrelloProject): CreateProjectData {\n    try {\n      // Sanitização e validação de dados\n      const title = this.sanitizeString(trelloProject.title);\n      const description = this.sanitizeString(trelloProject.description || '');\n\n      if (!title || title.length < 3) {\n        throw new Error('Título do projeto inválido');\n      }\n\n      // Mapeamento de status\n      const statusMapping: Record<string, ProjectStatus> = {\n        'a-fazer': ProjectStatus.A_FAZER,\n        'em-andamento': ProjectStatus.EM_ANDAMENTO,\n        concluido: ProjectStatus.CONCLUIDO,\n      };\n\n      // Mapeamento de plataformas\n      const platformMapping: Record<string, Platform> = {\n        N8N: Platform.N8N,\n        Jira: Platform.JIRA,\n        Hubspot: Platform.HUBSPOT,\n        Backoffice: Platform.BACKOFFICE,\n        'Google Workspace': Platform.GOOGLE_WORKSPACE,\n      };\n\n      // Mapeamento de membros\n      const memberMapping: Record<string, TeamMember> = {\n        'Guilherme Souza': TeamMember.GUILHERME_SOUZA,\n        'Felipe Braat': TeamMember.FELIPE_BRAAT,\n        'Tiago Triani': TeamMember.TIAGO_TRIANI,\n      };\n\n      // Transformação de dados\n      const platforms = trelloProject.platforms\n        .map(p => platformMapping[p])\n        .filter(Boolean) as Platform[];\n\n      const responsible = trelloProject.responsible\n        .map(r => memberMapping[r])\n        .filter(Boolean) as TeamMember[];\n\n      const transformedProject: CreateProjectData = {\n        title,\n        description,\n        progress: Math.max(0, Math.min(100, trelloProject.progress)),\n        platforms: platforms.length > 0 ? platforms : [Platform.BACKOFFICE],\n        responsible:\n          responsible.length > 0 ? responsible : [TeamMember.GUILHERME_SOUZA],\n        imageUrl: trelloProject.imageUrl || null,\n        startDate: new Date(trelloProject.startDate),\n        estimatedEndDate: new Date(trelloProject.estimatedEndDate),\n        status: statusMapping[trelloProject.status] || ProjectStatus.A_FAZER,\n        priority:\n          (trelloProject.priority?.toUpperCase() as ProjectPriority) ||\n          ProjectPriority.MEDIUM,\n        trelloCardId: trelloProject.trelloCardId || null,\n        labels: trelloProject.labels || [],\n      };\n\n      return transformedProject;\n    } catch (error) {\n      console.error('Erro na transformação Trello → Prisma:', error);\n      throw new Error(\n        `Falha na transformação do projeto: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      );\n    }\n  }\n\n  /**\n   * Sincronização em lote com transformação e validação MCP\n   */\n  async syncFromTrelloWithMCP(trelloProjects: TrelloProject[]): Promise<{\n    success: number;\n    errors: { project: string; error: string }[];\n  }> {\n    await this.initialize();\n\n    const results = {\n      success: 0,\n      errors: [] as { project: string; error: string }[],\n    };\n\n    try {\n      await this.prisma.$transaction(async tx => {\n        for (const trelloProject of trelloProjects) {\n          try {\n            const transformedProject =\n              this.transformTrelloToProject(trelloProject);\n\n            if (!transformedProject.trelloCardId) {\n              throw new Error('trelloCardId é obrigatório');\n            }\n\n            await tx.project.upsert({\n              where: { trelloCardId: transformedProject.trelloCardId },\n              update: {\n                ...transformedProject,\n                syncHistory: {\n                  create: {\n                    action: 'SYNCED',\n                    source: 'trello-mcp',\n                    success: true,\n                    details: {\n                      batchSync: true,\n                      mcpEnabled:\n                        this.mcpService.getConnectionStatus().connected,\n                    },\n                  },\n                },\n              },\n              create: {\n                ...transformedProject,\n                syncHistory: {\n                  create: {\n                    action: 'CREATED',\n                    source: 'trello-mcp',\n                    success: true,\n                    details: {\n                      batchSync: true,\n                      mcpEnabled:\n                        this.mcpService.getConnectionStatus().connected,\n                    },\n                  },\n                },\n              },\n            });\n\n            results.success++;\n          } catch (error) {\n            const errorMsg =\n              error instanceof Error ? error.message : 'Erro desconhecido';\n\n            results.errors.push({\n              project: trelloProject.title || 'Projeto sem título',\n              error: errorMsg,\n            });\n\n            // Log do erro no histórico\n            await this.logSyncError(\n              null,\n              SyncAction.ERROR,\n              'trello-mcp',\n              errorMsg,\n              { trelloCardId: trelloProject.trelloCardId }\n            );\n          }\n        }\n      });\n\n      console.log(\n        `✅ Sincronização MCP concluída: ${results.success} sucessos, ${results.errors.length} erros`\n      );\n\n      return results;\n    } catch (error) {\n      console.error('Erro na sincronização MCP em lote:', error);\n      throw new Error('Falha na sincronização em lote com MCP');\n    }\n  }\n\n  /**\n   * Sanitiza strings para segurança\n   */\n  private sanitizeString(input: string): string {\n    if (!input || typeof input !== 'string') return '';\n\n    return input\n      .trim()\n      .replace(/[<>]/g, '') // Remove HTML tags\n      .replace(/javascript:/gi, '') // Remove JS protocol\n      .replace(/on\\w+=/gi, '') // Remove event handlers\n      .substring(0, 255); // Limita tamanho\n  }\n\n  /**\n   * Obtém status da integração MCP\n   */\n  getMCPStatus() {\n    return {\n      initialized: this.isInitialized,\n      ...this.mcpService.getConnectionStatus(),\n    };\n  }\n\n  /**\n   * Fecha conexão com o banco e MCP\n   */\n  async disconnect(): Promise<void> {\n    await Promise.all([\n      this.prisma.$disconnect(),\n      this.mcpService.disconnect(),\n    ]);\n  }\n}\n\n// Instância singleton do serviço de banco\nexport const databaseService = new DatabaseService();\n\n// Export dos tipos para uso em outros arquivos\nexport type {\n  Project,\n  SyncHistory,\n  ProjectStatus,\n  ProjectPriority,\n  Platform,\n  TeamMember,\n  SyncAction,\n};\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\database\\test-mcp-integration.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":107,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":107,"endColumn":16,"suggestions":[{"fix":{"range":[3059,3121],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":135,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":135,"endColumn":18,"suggestions":[{"fix":{"range":[3825,4014],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":164,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":164,"endColumn":18,"suggestions":[{"fix":{"range":[4527,4584],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'mcpStatus' is assigned a value but never used.","line":174,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":22},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":184,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":184,"endColumn":18,"suggestions":[{"fix":{"range":[5237,5285],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":198,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":198,"endColumn":18,"suggestions":[{"fix":{"range":[5639,5699],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":218,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":218,"endColumn":18,"suggestions":[{"fix":{"range":[6276,6327],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":232,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":232,"endColumn":18,"suggestions":[{"fix":{"range":[6659,6707],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":240,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":240,"endColumn":18,"suggestions":[{"fix":{"range":[6963,7092],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":257,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":257,"endColumn":18,"suggestions":[{"fix":{"range":[7423,7473],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":275,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":275,"endColumn":18,"suggestions":[{"fix":{"range":[8093,8134],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":289,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":289,"endColumn":18,"suggestions":[{"fix":{"range":[8467,8522],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":297,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":297,"endColumn":18,"suggestions":[{"fix":{"range":[8769,8830],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":311,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":311,"endColumn":18,"suggestions":[{"fix":{"range":[9169,9223],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":321,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":321,"endColumn":22,"suggestions":[{"fix":{"range":[9489,9536],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":343,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":343,"endColumn":18,"suggestions":[{"fix":{"range":[10122,10167],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":357,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":357,"endColumn":18,"suggestions":[{"fix":{"range":[10495,10545],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":369,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":369,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":381,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":381,"endColumn":18,"suggestions":[{"fix":{"range":[11371,11412],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Testes de integração para Fase 2 - MCP Integration\n * Valida funcionamento do DatabaseService, MCP e Real-time\n * Seguindo padrões de Vibe Coding\n */\n\nimport type { Project as TrelloProject } from '@/types/project';\n\nimport { databaseService } from './prisma';\n\nimport { supabaseMCPService } from '@/lib/services/supabase-mcp';\nimport { realtimeManager } from '@/lib/services/realtime-manager';\nimport { webhookHandler } from '@/lib/services/webhook-handler';\n\n/**\n * Dados de teste para projetos Trello\n */\nconst mockTrelloProjects: TrelloProject[] = [\n  {\n    id: 'test-card-1',\n    title: 'Teste MCP Integration - Projeto 1',\n    description: 'Projeto de teste para validar integração MCP',\n    progress: 25,\n    platforms: ['N8N', 'Jira'],\n    responsible: ['Guilherme Souza'],\n    status: 'em-andamento',\n    priority: 'high',\n    trelloCardId: 'test-card-1',\n    labels: ['automation', 'high-priority'],\n    startDate: new Date().toISOString(),\n    estimatedEndDate: new Date(\n      Date.now() + 7 * 24 * 60 * 60 * 1000\n    ).toISOString(),\n    imageUrl: undefined,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n  {\n    id: 'test-card-2',\n    title: 'Teste MCP Integration - Projeto 2',\n    description: 'Segundo projeto de teste para validar transformações',\n    progress: 75,\n    platforms: ['Hubspot', 'Backoffice'],\n    responsible: ['Felipe Braat', 'Tiago Triani'],\n    status: 'concluido',\n    priority: 'medium',\n    trelloCardId: 'test-card-2',\n    labels: ['crm', 'completed'],\n    startDate: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),\n    estimatedEndDate: new Date(\n      Date.now() - 1 * 24 * 60 * 60 * 1000\n    ).toISOString(),\n    imageUrl: undefined,\n    createdAt: new Date(Date.now() - 14 * 24 * 60 * 60 * 1000).toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n];\n\n/**\n * Mock webhook payload para testes\n */\nconst mockWebhookPayload = {\n  action: {\n    type: 'updateCard',\n    data: {\n      card: {\n        id: 'test-card-webhook',\n        name: 'Teste Webhook Integration',\n        desc: 'Projeto criado via webhook para teste',\n        due: new Date(Date.now() + 10 * 24 * 60 * 60 * 1000).toISOString(),\n        list: { name: 'Em Andamento' },\n        labels: [\n          { name: 'N8N', color: 'purple' },\n          { name: 'high-priority', color: 'red' },\n        ],\n        members: [{ fullName: 'Guilherme Souza' }],\n        checklists: [\n          {\n            checkItems: [\n              { state: 'complete' as const },\n              { state: 'complete' as const },\n              { state: 'incomplete' as const },\n              { state: 'incomplete' as const },\n            ],\n          },\n        ],\n      },\n    },\n  },\n};\n\n/**\n * Classe principal de testes\n */\nexport class MCPIntegrationTester {\n  private testResults: { [key: string]: boolean } = {};\n  private errors: string[] = [];\n\n  /**\n   * Executa todos os testes da Fase 2\n   */\n  async runAllTests(): Promise<{\n    success: boolean;\n    results: any;\n    errors: string[];\n  }> {\n    console.log('🧪 Iniciando testes de integração MCP - Fase 2');\n\n    try {\n      // Teste 1: Inicialização dos serviços\n      await this.testServiceInitialization();\n\n      // Teste 2: Transformação Trello → Prisma\n      await this.testTrelloTransformation();\n\n      // Teste 3: Sincronização com MCP\n      await this.testMCPSync();\n\n      // Teste 4: Analytics avançados\n      await this.testAdvancedAnalytics();\n\n      // Teste 5: Webhook processing\n      await this.testWebhookProcessing();\n\n      // Teste 6: Real-time subscriptions\n      await this.testRealtimeSubscriptions();\n\n      // Teste 7: Error handling\n      await this.testErrorHandling();\n\n      const success = Object.values(this.testResults).every(\n        result => result === true\n      );\n\n      console.log('🧪 Testes concluídos:', {\n        success,\n        passed: Object.values(this.testResults).filter(r => r).length,\n        total: Object.keys(this.testResults).length,\n      });\n\n      return {\n        success,\n        results: this.testResults,\n        errors: this.errors,\n      };\n    } catch (error) {\n      this.errors.push(\n        `Erro geral nos testes: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      );\n\n      return {\n        success: false,\n        results: this.testResults,\n        errors: this.errors,\n      };\n    }\n  }\n\n  /**\n   * Teste 1: Inicialização dos serviços\n   */\n  private async testServiceInitialization(): Promise<void> {\n    try {\n      console.log('🔧 Testando inicialização dos serviços...');\n\n      // Testa DatabaseService\n      await databaseService.initialize();\n      const dbStatus = databaseService.getMCPStatus();\n\n      this.testResults['database_initialization'] = dbStatus.initialized;\n\n      // Testa SupabaseMCPService\n      await supabaseMCPService.initialize();\n      const mcpStatus = supabaseMCPService.getConnectionStatus();\n\n      this.testResults['mcp_initialization'] = true; // Mock sempre retorna sucesso\n\n      // Testa RealtimeManager\n      await realtimeManager.initialize();\n      const realtimeStats = realtimeManager.getStats();\n\n      this.testResults['realtime_initialization'] = realtimeStats.initialized;\n\n      console.log('✅ Inicialização dos serviços: OK');\n    } catch (error) {\n      this.testResults['service_initialization'] = false;\n      this.errors.push(\n        `Erro na inicialização: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      );\n    }\n  }\n\n  /**\n   * Teste 2: Transformação Trello → Prisma\n   */\n  private async testTrelloTransformation(): Promise<void> {\n    try {\n      console.log('🔄 Testando transformação Trello → Prisma...');\n\n      for (const trelloProject of mockTrelloProjects) {\n        const transformed =\n          databaseService.transformTrelloToProject(trelloProject);\n\n        // Valida campos obrigatórios\n        const hasRequiredFields = !!(\n          transformed.title &&\n          transformed.trelloCardId &&\n          transformed.status &&\n          transformed.priority &&\n          transformed.platforms.length > 0 &&\n          transformed.responsible.length > 0\n        );\n\n        this.testResults[`transformation_${trelloProject.id}`] =\n          hasRequiredFields;\n      }\n\n      console.log('✅ Transformação Trello → Prisma: OK');\n    } catch (error) {\n      this.testResults['trello_transformation'] = false;\n      this.errors.push(\n        `Erro na transformação: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      );\n    }\n  }\n\n  /**\n   * Teste 3: Sincronização com MCP\n   */\n  private async testMCPSync(): Promise<void> {\n    try {\n      console.log('🔄 Testando sincronização MCP...');\n\n      const syncResult =\n        await databaseService.syncFromTrelloWithMCP(mockTrelloProjects);\n\n      this.testResults['mcp_sync_success'] = syncResult.success > 0;\n      this.testResults['mcp_sync_no_errors'] = syncResult.errors.length === 0;\n\n      console.log('✅ Sincronização MCP: OK', {\n        success: syncResult.success,\n        errors: syncResult.errors.length,\n      });\n    } catch (error) {\n      this.testResults['mcp_sync'] = false;\n      this.errors.push(\n        `Erro na sincronização MCP: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      );\n    }\n  }\n\n  /**\n   * Teste 4: Analytics avançados\n   */\n  private async testAdvancedAnalytics(): Promise<void> {\n    try {\n      console.log('📊 Testando analytics avançados...');\n\n      const analytics = await databaseService.getAdvancedAnalytics('month');\n\n      // Analytics pode ser null se MCP não estiver disponível (modo fallback)\n      this.testResults['advanced_analytics'] = analytics !== undefined;\n\n      if (analytics) {\n        this.testResults['analytics_structure'] = !!(\n          typeof analytics.totalProjects === 'number' &&\n          typeof analytics.avgProgress === 'number' &&\n          analytics.projectsByStatus &&\n          analytics.projectsByPriority\n        );\n      } else {\n        this.testResults['analytics_structure'] = true; // OK em modo fallback\n      }\n\n      console.log('✅ Analytics avançados: OK');\n    } catch (error) {\n      this.testResults['advanced_analytics'] = false;\n      this.errors.push(\n        `Erro nos analytics: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      );\n    }\n  }\n\n  /**\n   * Teste 5: Webhook processing\n   */\n  private async testWebhookProcessing(): Promise<void> {\n    try {\n      console.log('🔗 Testando processamento de webhook...');\n\n      const webhookResult =\n        await webhookHandler.processWebhook(mockWebhookPayload);\n\n      this.testResults['webhook_processing'] = webhookResult.success;\n      this.testResults['webhook_project_id'] = !!webhookResult.projectId;\n\n      console.log('✅ Processamento de webhook: OK', webhookResult);\n    } catch (error) {\n      this.testResults['webhook_processing'] = false;\n      this.errors.push(\n        `Erro no webhook: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      );\n    }\n  }\n\n  /**\n   * Teste 6: Real-time subscriptions\n   */\n  private async testRealtimeSubscriptions(): Promise<void> {\n    try {\n      console.log('📡 Testando subscriptions real-time...');\n\n      let eventReceived = false;\n\n      // Adiciona subscription de teste\n      realtimeManager.subscribe('test-subscription', {\n        eventTypes: ['project-updated'],\n        enabled: true,\n        callback: event => {\n          eventReceived = true;\n          console.log('📡 Evento recebido:', event.type);\n        },\n      });\n\n      // Emite evento de teste\n      realtimeManager.emit({\n        type: 'project-updated',\n        data: { test: true },\n        timestamp: new Date().toISOString(),\n        source: 'manual',\n      });\n\n      // Aguarda processamento\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      this.testResults['realtime_subscription'] = eventReceived;\n      this.testResults['realtime_stats'] =\n        realtimeManager.getStats().subscriptions > 0;\n\n      // Remove subscription de teste\n      realtimeManager.unsubscribe('test-subscription');\n\n      console.log('✅ Real-time subscriptions: OK');\n    } catch (error) {\n      this.testResults['realtime_subscriptions'] = false;\n      this.errors.push(\n        `Erro no real-time: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      );\n    }\n  }\n\n  /**\n   * Teste 7: Error handling\n   */\n  private async testErrorHandling(): Promise<void> {\n    try {\n      console.log('⚠️ Testando tratamento de erros...');\n\n      // Testa projeto inválido (sem título)\n      const invalidProject: TrelloProject = {\n        ...mockTrelloProjects[0],\n        title: '', // Título vazio deve gerar erro\n        id: 'invalid-test',\n      };\n\n      try {\n        databaseService.transformTrelloToProject(invalidProject);\n        this.testResults['error_handling_validation'] = false; // Deveria ter dado erro\n      } catch (error) {\n        this.testResults['error_handling_validation'] = true; // Erro esperado\n      }\n\n      // Testa webhook inválido\n      const invalidWebhook = { action: { type: 'invalidEvent', data: {} } };\n      const webhookResult = await webhookHandler.processWebhook(\n        invalidWebhook as any\n      );\n\n      this.testResults['error_handling_webhook'] = webhookResult.success; // Deve retornar sucesso mas ignorar\n\n      console.log('✅ Tratamento de erros: OK');\n    } catch (error) {\n      this.testResults['error_handling'] = false;\n      this.errors.push(\n        `Erro no teste de erros: ${error instanceof Error ? error.message : 'Erro desconhecido'}`\n      );\n    }\n  }\n\n  /**\n   * Obtém relatório detalhado dos testes\n   */\n  getDetailedReport(): string {\n    const totalTests = Object.keys(this.testResults).length;\n    const passedTests = Object.values(this.testResults).filter(r => r).length;\n    const failedTests = totalTests - passedTests;\n\n    let report = `\n📋 RELATÓRIO DE TESTES - FASE 2 MCP INTEGRATION\n\n✅ Testes Aprovados: ${passedTests}/${totalTests}\n❌ Testes Falharam: ${failedTests}/${totalTests}\n📊 Taxa de Sucesso: ${Math.round((passedTests / totalTests) * 100)}%\n\nDETALHES DOS TESTES:\n`;\n\n    for (const [testName, result] of Object.entries(this.testResults)) {\n      const status = result ? '✅' : '❌';\n\n      report += `${status} ${testName}\\n`;\n    }\n\n    if (this.errors.length > 0) {\n      report += `\\n❌ ERROS ENCONTRADOS:\\n`;\n      this.errors.forEach((error, index) => {\n        report += `${index + 1}. ${error}\\n`;\n      });\n    }\n\n    return report;\n  }\n}\n\n// Instância do tester para uso externo\nexport const mcpIntegrationTester = new MCPIntegrationTester();\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\database\\test-prisma.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":19,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":19,"endColumn":16,"suggestions":[{"fix":{"range":[449,506],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":16,"suggestions":[{"fix":{"range":[631,738],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":33,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":33,"endColumn":16,"suggestions":[{"fix":{"range":[855,908],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":16,"suggestions":[{"fix":{"range":[1007,1116],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":44,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":44,"endColumn":16,"suggestions":[{"fix":{"range":[1122,1174],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":48,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":48,"endColumn":18,"suggestions":[{"fix":{"range":[1217,1260],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":60,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":60,"endColumn":14,"suggestions":[{"fix":{"range":[1425,1485],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":16,"suggestions":[{"fix":{"range":[2570,2615],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":16,"suggestions":[{"fix":{"range":[2620,2673],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":99,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":99,"endColumn":16,"suggestions":[{"fix":{"range":[2678,2732],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":100,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":100,"endColumn":16,"suggestions":[{"fix":{"range":[2737,2802],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":16,"suggestions":[{"fix":{"range":[2807,2869],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":16,"suggestions":[{"fix":{"range":[2874,2939],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":103,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":103,"endColumn":16,"suggestions":[{"fix":{"range":[2944,3004],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":104,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":104,"endColumn":16,"suggestions":[{"fix":{"range":[3009,3063],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":16,"suggestions":[{"fix":{"range":[3597,3646],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":127,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":127,"endColumn":18,"suggestions":[{"fix":{"range":[3689,3738],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":14,"suggestions":[{"fix":{"range":[3840,3900],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":144,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":144,"endColumn":14,"suggestions":[{"fix":{"range":[4074,4116],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":145,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":145,"endColumn":14,"suggestions":[{"fix":{"range":[4119,4218],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":149,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":149,"endColumn":14,"suggestions":[{"fix":{"range":[4221,4312],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":14,"suggestions":[{"fix":{"range":[4315,4416],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Teste básico para validar integração Prisma\n * Arquivo temporário para validar a estrutura durante a migração\n */\n\nimport type { TrelloCard } from '@/lib/utils/transformers';\n\nimport { DatabaseService } from './prisma';\n\nimport { transformTrelloCardToPrismaProject } from '@/lib/utils/transformers';\n\n/**\n * Teste básico de CRUD operations\n */\nexport async function testDatabaseOperations() {\n  const db = new DatabaseService();\n\n  try {\n    console.log('🧪 Iniciando testes do DatabaseService...');\n\n    // Teste 1: Buscar projetos (deve retornar array vazio inicialmente)\n    const projects = await db.getProjects();\n\n    console.log(\n      '✅ Teste 1 - getProjects():',\n      projects.length,\n      'projetos encontrados'\n    );\n\n    // Teste 2: Estatísticas (deve retornar zeros inicialmente)\n    const stats = await db.getProjectStats();\n\n    console.log('✅ Teste 2 - getProjectStats():', stats);\n\n    // Teste 3: Histórico de sincronização\n    const history = await db.getSyncHistory(10);\n\n    console.log(\n      '✅ Teste 3 - getSyncHistory():',\n      history.length,\n      'entradas encontradas'\n    );\n\n    console.log('🎉 Todos os testes básicos passaram!');\n\n    return true;\n  } catch (error) {\n    console.error('❌ Erro nos testes:', error);\n\n    return false;\n  } finally {\n    await db.disconnect();\n  }\n}\n\n/**\n * Teste de transformação de dados Trello\n */\nexport function testTrelloTransformation() {\n  console.log('🧪 Testando transformação de dados Trello...');\n\n  // Mock de um card do Trello\n  const mockTrelloCard: TrelloCard = {\n    id: 'test-card-123',\n    name: 'Projeto de Teste - Integração N8N',\n    desc: 'Descrição do projeto de teste para validar a transformação de dados',\n    due: '2024-12-31T23:59:59.000Z',\n    dateLastActivity: '2024-01-15T10:30:00.000Z',\n    list: {\n      id: 'list-123',\n      name: 'Em andamento',\n    },\n    labels: [\n      { id: 'label-1', name: 'N8N', color: 'purple' },\n      { id: 'label-2', name: 'Alta Prioridade', color: 'red' },\n    ],\n    members: [\n      { id: 'member-1', fullName: 'Guilherme Souza', username: 'guilherme' },\n    ],\n    checklists: [\n      {\n        id: 'checklist-1',\n        name: 'Tarefas',\n        checkItems: [\n          { id: 'item-1', name: 'Configurar webhook', state: 'complete' },\n          { id: 'item-2', name: 'Testar integração', state: 'incomplete' },\n          { id: 'item-3', name: 'Documentar processo', state: 'incomplete' },\n        ],\n      },\n    ],\n  };\n\n  try {\n    const transformedProject =\n      transformTrelloCardToPrismaProject(mockTrelloCard);\n\n    console.log('✅ Transformação bem-sucedida:');\n    console.log('  - Título:', transformedProject.title);\n    console.log('  - Status:', transformedProject.status);\n    console.log('  - Progresso:', transformedProject.progress + '%');\n    console.log('  - Plataformas:', transformedProject.platforms);\n    console.log('  - Responsáveis:', transformedProject.responsible);\n    console.log('  - Prioridade:', transformedProject.priority);\n    console.log('  - Labels:', transformedProject.labels);\n\n    // Validações básicas\n    if (transformedProject.title.length === 0) {\n      throw new Error('Título não pode estar vazio');\n    }\n\n    if (transformedProject.progress < 0 || transformedProject.progress > 100) {\n      throw new Error('Progresso deve estar entre 0 e 100');\n    }\n\n    if (transformedProject.platforms.length === 0) {\n      throw new Error('Deve ter pelo menos uma plataforma');\n    }\n\n    if (transformedProject.responsible.length === 0) {\n      throw new Error('Deve ter pelo menos um responsável');\n    }\n\n    console.log('🎉 Teste de transformação passou!');\n\n    return true;\n  } catch (error) {\n    console.error('❌ Erro na transformação:', error);\n\n    return false;\n  }\n}\n\n/**\n * Executa todos os testes\n */\nexport async function runAllTests() {\n  console.log('🚀 Executando suite de testes da Fase 1...\\n');\n\n  const transformationTest = testTrelloTransformation();\n  const databaseTest = await testDatabaseOperations();\n\n  const allPassed = transformationTest && databaseTest;\n\n  console.log('\\n📊 Resultado dos Testes:');\n  console.log(\n    '  - Transformação Trello:',\n    transformationTest ? '✅ PASSOU' : '❌ FALHOU'\n  );\n  console.log(\n    '  - Operações Database:',\n    databaseTest ? '✅ PASSOU' : '❌ FALHOU'\n  );\n  console.log(\n    '  - Status Geral:',\n    allPassed ? '🎉 TODOS PASSARAM' : '⚠️ ALGUNS FALHARAM'\n  );\n\n  return allPassed;\n}\n\n// Exporta função para uso em desenvolvimento\n// Apenas no servidor/Node.js\nexport const devTest =\n  typeof window === 'undefined' ? () => runAllTests() : undefined;\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\services\\realtime-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":67,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_.*?$/u.","line":111,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":115,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":115,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":213,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":213,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":251,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":251,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":279,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":279,"endColumn":20,"suggestions":[{"fix":{"range":[6922,6983],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":288,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":288,"endColumn":18,"suggestions":[{"fix":{"range":[7132,7185],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":18,"suggestions":[{"fix":{"range":[7651,7700],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":308,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":308,"endColumn":20,"suggestions":[{"fix":{"range":[7729,7784],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":337,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":337,"endColumn":18,"suggestions":[{"fix":{"range":[8532,8628],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":356,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":356,"endColumn":18,"suggestions":[{"fix":{"range":[8941,8987],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":358,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":358,"endColumn":20,"suggestions":[{"fix":{"range":[9016,9077],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * RealtimeManager - Gerenciamento de subscriptions em tempo real\n * Integração com Supabase MCP e webhooks Trello\n * Seguindo padrões de Vibe Coding e arquitetura Next.js 15\n */\n\nimport { supabaseMCPService } from '@/lib/services/supabase-mcp';\nimport { webhookHandler } from '@/lib/services/webhook-handler';\nimport { databaseService } from '@/lib/database/prisma';\n\n/**\n * Tipos de eventos real-time\n */\nexport type RealtimeEventType =\n  | 'project-created'\n  | 'project-updated'\n  | 'project-deleted'\n  | 'sync-completed';\n\n/**\n * Payload de evento real-time\n */\nexport interface RealtimeEvent {\n  type: RealtimeEventType;\n  data: any;\n  timestamp: string;\n  source: 'trello' | 'manual' | 'webhook' | 'mcp';\n}\n\n/**\n * Callback para eventos real-time\n */\nexport type RealtimeCallback = (event: RealtimeEvent) => void;\n\n/**\n * Configuração de subscription\n */\nexport interface SubscriptionConfig {\n  eventTypes: RealtimeEventType[];\n  callback: RealtimeCallback;\n  enabled: boolean;\n}\n\nexport class RealtimeManager {\n  private subscriptions = new Map<string, SubscriptionConfig>();\n  private isInitialized = false;\n  private eventQueue: RealtimeEvent[] = [];\n  private processingQueue = false;\n\n  /**\n   * Inicializa o gerenciador de real-time\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) return;\n\n    try {\n      // Inicializa MCP se disponível\n      await supabaseMCPService.initialize();\n\n      // Configura listeners de eventos do browser\n      this.setupBrowserEventListeners();\n\n      // Configura subscription MCP para projetos\n      await this.setupMCPSubscriptions();\n\n      this.isInitialized = true;\n    } catch (error) {\n      // RealtimeManager inicializado em modo fallback\n      this.isInitialized = true;\n    }\n  }\n\n  /**\n   * Adiciona subscription para eventos real-time\n   */\n  subscribe(id: string, config: SubscriptionConfig): void {\n    this.subscriptions.set(id, config);\n  }\n\n  /**\n   * Remove subscription\n   */\n  unsubscribe(id: string): void {\n    if (this.subscriptions.has(id)) {\n      this.subscriptions.delete(id);\n    }\n  }\n\n  /**\n   * Emite evento para todas as subscriptions ativas\n   */\n  emit(event: RealtimeEvent): void {\n    // Adiciona à fila se estiver processando\n    if (this.processingQueue) {\n      this.eventQueue.push(event);\n\n      return;\n    }\n\n    this.processEvent(event);\n  }\n\n  /**\n   * Processa evento individual\n   */\n  private async processEvent(event: RealtimeEvent): Promise<void> {\n    this.processingQueue = true;\n\n    try {\n      // Notifica todas as subscriptions ativas\n      Array.from(this.subscriptions.entries()).forEach(([id, config]) => {\n        if (config.enabled && config.eventTypes.includes(event.type)) {\n          try {\n            config.callback(event);\n          } catch (error) {\n            // Erro na subscription - falha silenciosa\n          }\n        }\n      });\n\n      // Processa fila se houver eventos pendentes\n      await this.processEventQueue();\n    } finally {\n      this.processingQueue = false;\n    }\n  }\n\n  /**\n   * Processa fila de eventos\n   */\n  private async processEventQueue(): Promise<void> {\n    while (this.eventQueue.length > 0) {\n      const event = this.eventQueue.shift();\n\n      if (event) {\n        await this.processEvent(event);\n      }\n    }\n  }\n\n  /**\n   * Configura listeners de eventos do browser\n   */\n  private setupBrowserEventListeners(): void {\n    if (typeof window === 'undefined') return;\n\n    // Listener para eventos customizados do webhook\n    window.addEventListener('project-updated', (event: any) => {\n      this.emit({\n        type: 'project-updated',\n        data: event.detail,\n        timestamp: new Date().toISOString(),\n        source: 'webhook',\n      });\n    });\n\n    // Listener para visibilidade da página (para reativar subscriptions)\n    document.addEventListener('visibilitychange', () => {\n      if (!document.hidden && this.isInitialized) {\n        this.refreshSubscriptions();\n      }\n    });\n\n    // Event listeners configurados\n  }\n\n  /**\n   * Configura subscriptions MCP\n   */\n  private async setupMCPSubscriptions(): Promise<void> {\n    try {\n      const mcpStatus = supabaseMCPService.getConnectionStatus();\n\n      if (!mcpStatus.connected) {\n        return;\n      }\n\n      // Subscription para mudanças na tabela projects\n      await supabaseMCPService.setupRealtimeSubscription({\n        table: 'projects',\n        event: '*',\n        callback: payload => {\n          const eventType = this.mapSupabaseEventToRealtimeEvent(\n            payload.eventType\n          );\n\n          if (eventType) {\n            this.emit({\n              type: eventType,\n              data: payload,\n              timestamp: new Date().toISOString(),\n              source: 'mcp',\n            });\n          }\n        },\n      });\n\n      // Subscription para histórico de sync\n      await supabaseMCPService.setupRealtimeSubscription({\n        table: 'sync_history',\n        event: 'INSERT',\n        callback: payload => {\n          this.emit({\n            type: 'sync-completed',\n            data: payload,\n            timestamp: new Date().toISOString(),\n            source: 'mcp',\n          });\n        },\n      });\n\n      // MCP subscriptions configuradas\n    } catch (error) {\n      // Erro ao configurar MCP subscriptions - falha silenciosa\n    }\n  }\n\n  /**\n   * Mapeia eventos do Supabase para eventos real-time\n   */\n  private mapSupabaseEventToRealtimeEvent(\n    supabaseEvent: string\n  ): RealtimeEventType | null {\n    const mapping: Record<string, RealtimeEventType> = {\n      INSERT: 'project-created',\n      UPDATE: 'project-updated',\n      DELETE: 'project-deleted',\n    };\n\n    return mapping[supabaseEvent] || null;\n  }\n\n  /**\n   * Reativa subscriptions (útil após perda de conexão)\n   */\n  async refreshSubscriptions(): Promise<void> {\n    try {\n      // Reativando subscriptions\n\n      // Reinicializa MCP se necessário\n      const mcpStatus = supabaseMCPService.getConnectionStatus();\n\n      if (!mcpStatus.connected) {\n        await supabaseMCPService.initialize();\n      }\n\n      // Reconfigura subscriptions MCP\n      await this.setupMCPSubscriptions();\n\n      // Subscriptions reativadas\n    } catch (error) {\n      // Erro ao reativar subscriptions - falha silenciosa\n    }\n  }\n\n  /**\n   * Processa webhook do Trello via real-time\n   */\n  async processWebhookRealtime(webhookPayload: any): Promise<void> {\n    try {\n      const result = await webhookHandler.processWebhook(webhookPayload);\n\n      if (result.success) {\n        this.emit({\n          type:\n            result.action === 'createCard'\n              ? 'project-created'\n              : 'project-updated',\n          data: {\n            projectId: result.projectId,\n            action: result.action,\n            details: result.details,\n          },\n          timestamp: new Date().toISOString(),\n          source: 'webhook',\n        });\n      }\n    } catch (error) {\n      console.error('Erro ao processar webhook real-time:', error);\n    }\n  }\n\n  /**\n   * Força sincronização completa com notificação real-time\n   */\n  async forceSyncWithRealtime(): Promise<void> {\n    try {\n      console.log('🔄 Iniciando sincronização forçada...');\n\n      // Busca projetos atualizados\n      await databaseService.initialize();\n      const projects = await databaseService.getProjects();\n\n      // Emite evento de sincronização completa\n      this.emit({\n        type: 'sync-completed',\n        data: {\n          projectCount: projects.length,\n          timestamp: new Date().toISOString(),\n          forced: true,\n        },\n        timestamp: new Date().toISOString(),\n        source: 'manual',\n      });\n\n      console.log('✅ Sincronização forçada concluída');\n    } catch (error) {\n      console.error('Erro na sincronização forçada:', error);\n    }\n  }\n\n  /**\n   * Obtém estatísticas do real-time manager\n   */\n  getStats() {\n    return {\n      initialized: this.isInitialized,\n      subscriptions: this.subscriptions.size,\n      activeSubscriptions: Array.from(this.subscriptions.values()).filter(\n        s => s.enabled\n      ).length,\n      eventQueue: this.eventQueue.length,\n      processingQueue: this.processingQueue,\n      mcpStatus: supabaseMCPService.getConnectionStatus(),\n      webhookStats: webhookHandler.getQueueStats(),\n    };\n  }\n\n  /**\n   * Habilita/desabilita subscription específica\n   */\n  toggleSubscription(id: string, enabled: boolean): void {\n    const subscription = this.subscriptions.get(id);\n\n    if (subscription) {\n      subscription.enabled = enabled;\n      console.log(\n        `📡 Subscription ${id} ${enabled ? 'habilitada' : 'desabilitada'}`\n      );\n    }\n  }\n\n  /**\n   * Limpa recursos e desconecta\n   */\n  async disconnect(): Promise<void> {\n    try {\n      // Remove todos os listeners\n      this.subscriptions.clear();\n      this.eventQueue = [];\n\n      // Desconecta MCP\n      await supabaseMCPService.disconnect();\n\n      this.isInitialized = false;\n      console.log('✅ RealtimeManager desconectado');\n    } catch (error) {\n      console.error('Erro ao desconectar RealtimeManager:', error);\n    }\n  }\n}\n\n// Instância singleton do gerenciador real-time\nexport const realtimeManager = new RealtimeManager();\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\services\\supabase-mcp.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'params' is defined but never used. Allowed unused args must match /^_.*?$/u.","line":29,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":96,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":120,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":211,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":299,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":299,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":312,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":312,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":20,"suggestions":[{"fix":{"range":[9039,9093],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'result' is assigned a value but never used.","line":357,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":357,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":428,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":428,"endColumn":18,"suggestions":[{"fix":{"range":[11404,11450],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":430,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":430,"endColumn":20,"suggestions":[{"fix":{"range":[11479,11528],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * SupabaseMCPService - Integração avançada com Supabase via MCP\n * Implementa operações avançadas, analytics e real-time subscriptions\n * Seguindo padrões de Vibe Coding e arquitetura Next.js 15\n */\n\nimport type {\n  Project,\n  ProjectStatus,\n  ProjectPriority,\n  Platform,\n  TeamMember,\n} from '@/lib/types/prisma-mock';\n\n// MCP Types - será substituído quando MCP estiver disponível\ninterface MCPExecuteResult {\n  data: any[];\n  error?: string;\n}\n\ninterface MCPProjectInfo {\n  id: string;\n  name: string;\n  status: string;\n}\n\n// Mock MCP functions até integração real\nconst mockMCP = {\n  async execute_sql(params: {\n    project_id: string;\n    query: string;\n  }): Promise<MCPExecuteResult> {\n    return { data: [] };\n  },\n\n  async get_project(params: { id: string }): Promise<MCPProjectInfo> {\n    return { id: params.id, name: 'Mock Project', status: 'active' };\n  },\n\n  async get_project_url(params: {\n    project_id: string;\n  }): Promise<{ url: string }> {\n    return { url: `https://mock-supabase-url.com/${params.project_id}` };\n  },\n};\n\n/**\n * Estatísticas de projetos por período\n */\nexport interface ProjectAnalytics {\n  totalProjects: number;\n  projectsByStatus: Record<ProjectStatus, number>;\n  projectsByPriority: Record<ProjectPriority, number>;\n  projectsByPlatform: Record<Platform, number>;\n  projectsByTeamMember: Record<TeamMember, number>;\n  avgProgress: number;\n  completionRate: number;\n  weeklyTrends: {\n    week: string;\n    created: number;\n    completed: number;\n  }[];\n}\n\n/**\n * Configuração de Real-time subscription\n */\nexport interface RealtimeConfig {\n  table: string;\n  event: 'INSERT' | 'UPDATE' | 'DELETE' | '*';\n  callback: (payload: any) => void;\n}\n\nexport class SupabaseMCPService {\n  private projectId: string;\n  private isConnected: boolean = false;\n  private subscriptions: Map<string, any> = new Map();\n\n  constructor() {\n    this.projectId =\n      process.env.NEXT_PUBLIC_SUPABASE_PROJECT_ID || 'mock-project';\n  }\n\n  /**\n   * Inicializa conexão MCP e valida projeto\n   */\n  async initialize(): Promise<void> {\n    try {\n      const projectInfo = await mockMCP.get_project({ id: this.projectId });\n\n      if (!projectInfo.id) {\n        throw new Error('Projeto Supabase não encontrado');\n      }\n\n      this.isConnected = true;\n    } catch (error) {\n      throw new Error('Falha na inicialização do Supabase MCP');\n    }\n  }\n\n  /**\n   * Executa query SQL avançada via MCP\n   */\n  async executeAdvancedQuery(query: string): Promise<any[]> {\n    if (!this.isConnected) {\n      await this.initialize();\n    }\n\n    try {\n      const result = await mockMCP.execute_sql({\n        project_id: this.projectId,\n        query: this.sanitizeQuery(query),\n      });\n\n      if (result.error) {\n        throw new Error(result.error);\n      }\n\n      return result.data;\n    } catch (error) {\n      throw new Error('Falha na execução da query avançada');\n    }\n  }\n\n  /**\n   * Obtém analytics completos dos projetos\n   */\n  async getProjectAnalytics(\n    period: 'week' | 'month' | 'quarter' = 'month'\n  ): Promise<ProjectAnalytics> {\n    const periodDays = period === 'week' ? 7 : period === 'month' ? 30 : 90;\n\n    const analyticsQuery = `\n      WITH project_stats AS (\n        SELECT \n          status,\n          priority,\n          platforms,\n          responsible,\n          progress,\n          created_at,\n          CASE WHEN status = 'concluido' THEN 1 ELSE 0 END as is_completed,\n          EXTRACT(WEEK FROM created_at) as week_number,\n          TO_CHAR(created_at, 'YYYY-WW') as week_label\n        FROM projects \n        WHERE created_at >= NOW() - INTERVAL '${periodDays} days'\n      ),\n      weekly_trends AS (\n        SELECT \n          week_label,\n          COUNT(*) as created,\n          SUM(is_completed) as completed\n        FROM project_stats\n        GROUP BY week_label, week_number\n        ORDER BY week_number DESC\n        LIMIT 12\n      )\n      SELECT \n        -- Totais\n        COUNT(*) as total_projects,\n        AVG(progress) as avg_progress,\n        (SUM(is_completed)::float / COUNT(*) * 100) as completion_rate,\n        \n        -- Por status\n        COUNT(*) FILTER (WHERE status = 'a-fazer') as status_a_fazer,\n        COUNT(*) FILTER (WHERE status = 'em-andamento') as status_em_andamento,\n        COUNT(*) FILTER (WHERE status = 'concluido') as status_concluido,\n        \n        -- Por prioridade\n        COUNT(*) FILTER (WHERE priority = 'low') as priority_low,\n        COUNT(*) FILTER (WHERE priority = 'medium') as priority_medium,\n        COUNT(*) FILTER (WHERE priority = 'high') as priority_high,\n        \n        -- Trends semanais (JSON)\n        COALESCE(\n          (SELECT json_agg(json_build_object('week', week_label, 'created', created, 'completed', completed))\n           FROM weekly_trends), \n          '[]'::json\n        ) as weekly_trends\n        \n      FROM project_stats;\n    `;\n\n    try {\n      const result = await this.executeAdvancedQuery(analyticsQuery);\n      const data = result[0] || {};\n\n      return {\n        totalProjects: data.total_projects || 0,\n        avgProgress: Math.round(data.avg_progress || 0),\n        completionRate: Math.round(data.completion_rate || 0),\n\n        projectsByStatus: {\n          A_FAZER: data.status_a_fazer || 0,\n          EM_ANDAMENTO: data.status_em_andamento || 0,\n          CONCLUIDO: data.status_concluido || 0,\n        } as Record<ProjectStatus, number>,\n\n        projectsByPriority: {\n          LOW: data.priority_low || 0,\n          MEDIUM: data.priority_medium || 0,\n          HIGH: data.priority_high || 0,\n        } as Record<ProjectPriority, number>,\n\n        // Mock data para plataformas e membros (será implementado com queries específicas)\n        projectsByPlatform: {} as Record<Platform, number>,\n        projectsByTeamMember: {} as Record<TeamMember, number>,\n\n        weeklyTrends: data.weekly_trends || [],\n      };\n    } catch (error) {\n      // Retorna analytics vazios em caso de erro\n      return {\n        totalProjects: 0,\n        avgProgress: 0,\n        completionRate: 0,\n        projectsByStatus: {\n          A_FAZER: 0,\n          EM_ANDAMENTO: 0,\n          CONCLUIDO: 0,\n        } as Record<ProjectStatus, number>,\n        projectsByPriority: { LOW: 0, MEDIUM: 0, HIGH: 0 } as Record<\n          ProjectPriority,\n          number\n        >,\n        projectsByPlatform: {} as Record<Platform, number>,\n        projectsByTeamMember: {} as Record<TeamMember, number>,\n        weeklyTrends: [],\n      };\n    }\n  }\n\n  /**\n   * Obtém projetos com filtros avançados via SQL\n   */\n  async getProjectsWithAdvancedFilters(filters: {\n    status?: ProjectStatus[];\n    priority?: ProjectPriority[];\n    platforms?: Platform[];\n    responsible?: TeamMember[];\n    dateRange?: { start: string; end: string };\n    searchTerm?: string;\n  }): Promise<Project[]> {\n    const conditions: string[] = ['1=1']; // Base condition\n\n    if (filters.status?.length) {\n      const statusList = filters.status.map(s => `'${s}'`).join(',');\n\n      conditions.push(`status IN (${statusList})`);\n    }\n\n    if (filters.priority?.length) {\n      const priorityList = filters.priority.map(p => `'${p}'`).join(',');\n\n      conditions.push(`priority IN (${priorityList})`);\n    }\n\n    if (filters.dateRange) {\n      conditions.push(\n        `created_at BETWEEN '${filters.dateRange.start}' AND '${filters.dateRange.end}'`\n      );\n    }\n\n    if (filters.searchTerm) {\n      const searchTerm = filters.searchTerm.replace(/'/g, \"''\"); // Escape quotes\n\n      conditions.push(\n        `(title ILIKE '%${searchTerm}%' OR description ILIKE '%${searchTerm}%')`\n      );\n    }\n\n    const query = `\n      SELECT * FROM projects \n      WHERE ${conditions.join(' AND ')}\n      ORDER BY updated_at DESC\n      LIMIT 100;\n    `;\n\n    return await this.executeAdvancedQuery(query);\n  }\n\n  /**\n   * Configura Real-time subscription para mudanças nos projetos\n   */\n  async setupRealtimeSubscription(config: RealtimeConfig): Promise<string> {\n    const subscriptionId = `${config.table}_${config.event}_${Date.now()}`;\n\n    try {\n      // Mock implementation - será substituído por real-time subscription\n      // Simula subscription ativa\n      this.subscriptions.set(subscriptionId, {\n        table: config.table,\n        event: config.event,\n        callback: config.callback,\n        active: true,\n      });\n\n      return subscriptionId;\n    } catch (error) {\n      throw new Error('Falha na configuração de real-time subscription');\n    }\n  }\n\n  /**\n   * Remove subscription real-time\n   */\n  async removeRealtimeSubscription(subscriptionId: string): Promise<void> {\n    try {\n      if (this.subscriptions.has(subscriptionId)) {\n        this.subscriptions.delete(subscriptionId);\n      }\n    } catch (error) {\n      // Erro ao remover subscription - falha silenciosa\n    }\n  }\n\n  /**\n   * Obtém URL do projeto Supabase\n   */\n  async getProjectUrl(): Promise<string> {\n    try {\n      const result = await mockMCP.get_project_url({\n        project_id: this.projectId,\n      });\n\n      return result.url;\n    } catch (error) {\n      console.error('Erro ao obter URL do projeto:', error);\n\n      return 'https://supabase.com';\n    }\n  }\n\n  /**\n   * Executa backup de dados críticos\n   */\n  async createDataBackup(): Promise<{\n    success: boolean;\n    backupId?: string;\n    error?: string;\n  }> {\n    try {\n      const backupQuery = `\n        SELECT \n          'projects' as table_name,\n          COUNT(*) as record_count,\n          NOW() as backup_timestamp\n        FROM projects\n        UNION ALL\n        SELECT \n          'sync_history' as table_name,\n          COUNT(*) as record_count,\n          NOW() as backup_timestamp\n        FROM sync_history;\n      `;\n\n      const result = await this.executeAdvancedQuery(backupQuery);\n      const backupId = `backup_${Date.now()}`;\n\n      return { success: true, backupId };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\n      };\n    }\n  }\n\n  /**\n   * Sanitiza queries SQL para segurança\n   */\n  private sanitizeQuery(query: string): string {\n    // Remove comentários SQL maliciosos\n    const sanitized = query\n      .replace(/--.*$/gm, '') // Remove comentários de linha\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove comentários de bloco\n      .trim();\n\n    // Valida se não contém comandos perigosos\n    const dangerousCommands = [\n      'DROP',\n      'DELETE',\n      'TRUNCATE',\n      'ALTER',\n      'CREATE',\n      'INSERT',\n      'UPDATE',\n    ];\n    const upperQuery = sanitized.toUpperCase();\n\n    for (const cmd of dangerousCommands) {\n      if (upperQuery.includes(cmd) && !upperQuery.startsWith('SELECT')) {\n        throw new Error(`Comando SQL não permitido: ${cmd}`);\n      }\n    }\n\n    return sanitized;\n  }\n\n  /**\n   * Obtém status da conexão MCP\n   */\n  getConnectionStatus(): {\n    connected: boolean;\n    projectId: string;\n    subscriptions: number;\n  } {\n    return {\n      connected: this.isConnected,\n      projectId: this.projectId,\n      subscriptions: this.subscriptions.size,\n    };\n  }\n\n  /**\n   * Desconecta e limpa recursos\n   */\n  async disconnect(): Promise<void> {\n    try {\n      // Remove todas as subscriptions\n      const subscriptionIds = Array.from(this.subscriptions.keys());\n\n      for (const id of subscriptionIds) {\n        await this.removeRealtimeSubscription(id);\n      }\n\n      this.isConnected = false;\n      console.log('✅ MCP desconectado com sucesso');\n    } catch (error) {\n      console.error('Erro ao desconectar MCP:', error);\n    }\n  }\n}\n\n// Instância singleton do serviço MCP\nexport const supabaseMCPService = new SupabaseMCPService();\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\services\\trello-sync.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'supabaseError' is defined but never used.","line":55,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'webhook' is assigned a value but never used.","line":175,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":175,"endColumn":20},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":182,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":182,"endColumn":22,"suggestions":[{"fix":{"range":[5221,5270],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import toast from 'react-hot-toast';\n\nimport { trelloApi } from '@/lib/trello';\nimport { projectsApi } from '@/lib/supabase';\nimport { Project } from '@/types/project';\n\nexport class TrelloSyncService {\n  private static instance: TrelloSyncService;\n  private syncInProgress = false;\n  private isPollingActive = false;\n\n  static getInstance(): TrelloSyncService {\n    if (!TrelloSyncService.instance) {\n      TrelloSyncService.instance = new TrelloSyncService();\n    }\n\n    return TrelloSyncService.instance;\n  }\n\n  async syncFromTrello(): Promise<Project[]> {\n    if (this.syncInProgress) {\n      toast.error('Sincronização já em andamento');\n      throw new Error('Sync already in progress');\n    }\n\n    this.syncInProgress = true;\n\n    try {\n      toast.loading('Sincronizando com Trello...', { id: 'trello-sync' });\n\n      // Fetch cards from Trello\n      const trelloCards = await trelloApi.getBoardCards();\n\n      // Transform to Project format\n      const projects = trelloApi.transformCardsToProjects(trelloCards);\n\n      // Filter out cards without proper content (empty or template cards)\n      const validProjects = projects.filter(\n        project =>\n          project.title &&\n          project.title.trim() !== '' &&\n          !project.title.toLowerCase().includes('template') &&\n          !project.title.toLowerCase().includes('exemplo')\n      );\n\n      // Try to sync with Supabase (if available) or return projects directly\n      let syncedProjects: Project[];\n\n      try {\n        syncedProjects = await projectsApi.syncFromTrello(trelloCards);\n        toast.success(\n          `${syncedProjects.length} projetos sincronizados com Supabase!`,\n          { id: 'trello-sync' }\n        );\n      } catch (supabaseError) {\n        // If Supabase is not available, return Trello data directly\n        // Supabase not available, using Trello data directly\n        syncedProjects = validProjects;\n        toast.success(\n          `${validProjects.length} projetos carregados do Trello!`,\n          { id: 'trello-sync' }\n        );\n      }\n\n      return syncedProjects;\n    } catch (error) {\n      const message =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n\n      toast.error(`Erro ao sincronizar: ${message}`, { id: 'trello-sync' });\n      throw error;\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n\n  async createProjectInTrello(project: Omit<Project, 'id'>): Promise<void> {\n    try {\n      toast.loading('Criando projeto no Trello...', { id: 'create-trello' });\n\n      // Get board lists to find appropriate list\n      const lists = await trelloApi.getBoardLists();\n      const planningList = lists.find(\n        list =>\n          list.name.toLowerCase().includes('planning') ||\n          list.name.toLowerCase().includes('backlog')\n      );\n\n      if (!planningList) {\n        throw new Error('Lista de planejamento não encontrada no Trello');\n      }\n\n      // Create card in Trello\n      await trelloApi.createCard(planningList.id, project);\n\n      toast.success('Projeto criado no Trello!', { id: 'create-trello' });\n    } catch (error) {\n      const message =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n\n      toast.error(`Erro ao criar projeto: ${message}`, { id: 'create-trello' });\n      throw error;\n    }\n  }\n\n  async updateProjectInTrello(\n    projectId: string,\n    updates: Partial<Project>\n  ): Promise<void> {\n    try {\n      toast.loading('Atualizando projeto no Trello...', {\n        id: 'update-trello',\n      });\n\n      await trelloApi.updateCard(projectId, updates);\n\n      toast.success('Projeto atualizado no Trello!', { id: 'update-trello' });\n    } catch (error) {\n      const message =\n        error instanceof Error ? error.message : 'Erro desconhecido';\n\n      toast.error(`Erro ao atualizar projeto: ${message}`, {\n        id: 'update-trello',\n      });\n      throw error;\n    }\n  }\n\n  isSyncInProgress(): boolean {\n    return this.syncInProgress;\n  }\n\n  startRealTimeSync(onUpdate: (projects: Project[]) => void): void {\n    if (this.isPollingActive) {\n      // Real-time sync already active\n\n      return;\n    }\n\n    // Starting real-time sync with Trello\n    this.isPollingActive = true;\n\n    trelloApi.startPolling(30000, projects => {\n      // Real-time sync update received\n      onUpdate(projects);\n    });\n  }\n\n  stopRealTimeSync(): void {\n    if (!this.isPollingActive) {\n      return;\n    }\n\n    // Stopping real-time sync\n    this.isPollingActive = false;\n    trelloApi.stopPolling();\n  }\n\n  isRealTimeSyncActive(): boolean {\n    return this.isPollingActive;\n  }\n\n  async setupWebhook(callbackURL: string): Promise<void> {\n    try {\n      // Check existing webhooks\n      const webhooks = await trelloApi.getWebhooks();\n      const existingWebhook = webhooks.find(w => w.callbackURL === callbackURL);\n\n      if (existingWebhook) {\n        // Webhook already exists\n        return;\n      }\n\n      // Create new webhook\n      const webhook = await trelloApi.createWebhook(callbackURL);\n\n      // Sync completed successfully\n      toast.success('Webhook configurado com sucesso!');\n    } catch (error) {\n      // Log errors only in development\n      if (process.env.NODE_ENV === 'development') {\n        console.error('Failed to setup webhook:', error);\n      }\n      toast.error('Erro ao configurar webhook');\n      throw error;\n    }\n  }\n}\n\nexport const trelloSyncService = TrelloSyncService.getInstance();\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\services\\webhook-handler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":265,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":265,"endColumn":19},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":18,"suggestions":[{"fix":{"range":[8539,8637],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":306,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":306,"endColumn":20,"suggestions":[{"fix":{"range":[8666,8723],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * WebhookHandler - Processamento de webhooks Trello no lado cliente\n * Integração com MCP e real-time subscriptions\n * Seguindo padrões de Vibe Coding e arquitetura Next.js 15\n */\n\nimport type { Project as TrelloProject } from '@/types/project';\n\nimport { databaseService } from '@/lib/database/prisma';\nimport { supabaseMCPService } from '@/lib/services/supabase-mcp';\n\n/**\n * Payload do webhook Trello processado\n */\nexport interface WebhookPayload {\n  action: {\n    type: string;\n    data: {\n      card?: {\n        id: string;\n        name: string;\n        desc: string;\n        due: string | null;\n        list: { name: string };\n        labels: Array<{ name: string; color: string }>;\n        members: Array<{ fullName: string }>;\n        checklists?: Array<{\n          checkItems: Array<{ state: 'complete' | 'incomplete' }>;\n        }>;\n      };\n    };\n  };\n}\n\n/**\n * Resultado do processamento do webhook\n */\nexport interface WebhookProcessResult {\n  success: boolean;\n  projectId?: string;\n  action?: string;\n  error?: string;\n  details?: any;\n}\n\nexport class WebhookHandler {\n  private isProcessing = false;\n  private processingQueue: WebhookPayload[] = [];\n\n  /**\n   * Processa webhook do Trello\n   */\n  async processWebhook(payload: WebhookPayload): Promise<WebhookProcessResult> {\n    try {\n      // Adiciona à fila se já está processando\n      if (this.isProcessing) {\n        this.processingQueue.push(payload);\n\n        return { success: true, action: 'queued' };\n      }\n\n      this.isProcessing = true;\n\n      const result = await this.handleWebhookPayload(payload);\n\n      // Processa fila se houver itens pendentes\n      await this.processQueue();\n\n      return result;\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Erro desconhecido',\n      };\n    } finally {\n      this.isProcessing = false;\n    }\n  }\n\n  /**\n   * Processa payload individual do webhook\n   */\n  private async handleWebhookPayload(\n    payload: WebhookPayload\n  ): Promise<WebhookProcessResult> {\n    const { action } = payload;\n\n    // Eventos relevantes para sincronização\n    const relevantEvents = [\n      'createCard',\n      'updateCard',\n      'deleteCard',\n      'moveCardToBoard',\n      'moveCardFromBoard',\n    ];\n\n    if (!relevantEvents.includes(action.type)) {\n      return { success: true, action: 'ignored' };\n    }\n\n    if (!action.data.card) {\n      return { success: true, action: 'no-card-data' };\n    }\n\n    try {\n      // Transforma dados do Trello para formato do projeto\n      const trelloProject = this.transformWebhookToProject(payload);\n\n      if (!trelloProject) {\n        return { success: false, error: 'Falha na transformação dos dados' };\n      }\n\n      // Sincroniza com banco via DatabaseService\n      const syncResult = await databaseService.syncFromTrelloWithMCP([\n        trelloProject,\n      ]);\n\n      if (syncResult.errors.length > 0) {\n        // Erros na sincronização - log silencioso\n      }\n\n      // Notifica subscriptions em tempo real se MCP estiver ativo\n      await this.notifyRealtimeSubscriptions(trelloProject, action.type);\n\n      return {\n        success: true,\n        projectId: trelloProject.trelloCardId,\n        action: action.type,\n        details: {\n          syncSuccess: syncResult.success,\n          syncErrors: syncResult.errors.length,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Erro no processamento',\n      };\n    }\n  }\n\n  /**\n   * Transforma dados do webhook em projeto Trello\n   */\n  private transformWebhookToProject(\n    payload: WebhookPayload\n  ): TrelloProject | null {\n    const card = payload.action.data.card;\n\n    if (!card) return null;\n\n    try {\n      // Mapeamento de status\n      const statusMapping: Record<string, string> = {\n        planning: 'a-fazer',\n        backlog: 'a-fazer',\n        'to do': 'a-fazer',\n        fazer: 'a-fazer',\n        development: 'em-andamento',\n        doing: 'em-andamento',\n        progress: 'em-andamento',\n        andamento: 'em-andamento',\n        desenvolvimento: 'em-andamento',\n        done: 'concluido',\n        completed: 'concluido',\n        concluido: 'concluido',\n        finalizado: 'concluido',\n      };\n\n      // Mapeamento de plataformas\n      const platformMapping: Record<string, string> = {\n        n8n: 'N8N',\n        jira: 'Jira',\n        hubspot: 'Hubspot',\n        backoffice: 'Backoffice',\n        'google workspace': 'Google Workspace',\n        google: 'Google Workspace',\n      };\n\n      // Mapeamento de membros\n      const memberMapping: Record<string, string> = {\n        'guilherme souza': 'Guilherme Souza',\n        guilherme: 'Guilherme Souza',\n        'felipe braat': 'Felipe Braat',\n        felipe: 'Felipe Braat',\n        'tiago triani': 'Tiago Triani',\n        tiago: 'Tiago Triani',\n      };\n\n      // Extrai plataformas dos labels\n      const platforms = card.labels\n        .map(label => {\n          const labelName = label.name.toLowerCase();\n\n          return platformMapping[labelName] || null;\n        })\n        .filter(Boolean);\n\n      // Extrai responsáveis dos membros\n      const responsible = card.members.map(member => {\n        const memberName = member.fullName.toLowerCase();\n\n        return memberMapping[memberName] || member.fullName;\n      });\n\n      // Calcula progresso baseado em checklists\n      let progress = 0;\n\n      if (card.checklists && card.checklists.length > 0) {\n        const allItems = card.checklists.flatMap(\n          checklist => checklist.checkItems\n        );\n        const completedItems = allItems.filter(\n          item => item.state === 'complete'\n        );\n\n        progress =\n          allItems.length > 0\n            ? Math.round((completedItems.length / allItems.length) * 100)\n            : 0;\n      } else {\n        // Progresso baseado no status se não há checklists\n        const listName = card.list.name.toLowerCase();\n\n        if (statusMapping[listName] === 'a-fazer') progress = 5;\n        else if (statusMapping[listName] === 'em-andamento') progress = 45;\n        else if (statusMapping[listName] === 'concluido') progress = 100;\n      }\n\n      // Determina prioridade baseada em labels\n      let priority = 'medium';\n      const hasRedLabel = card.labels.some(label => label.color === 'red');\n      const hasYellowLabel = card.labels.some(\n        label => label.color === 'yellow'\n      );\n      const hasGreenLabel = card.labels.some(label => label.color === 'green');\n\n      if (hasRedLabel) priority = 'high';\n      else if (hasGreenLabel) priority = 'low';\n      else if (hasYellowLabel) priority = 'medium';\n\n      const trelloProject: TrelloProject = {\n        id: card.id,\n        title: this.sanitizeString(card.name),\n        description: this.sanitizeString(card.desc || ''),\n        progress,\n        platforms: platforms.length > 0 ? (platforms as any[]) : ['Backoffice'],\n        responsible:\n          responsible.length > 0 ? (responsible as any[]) : ['Guilherme Souza'],\n        status: (statusMapping[card.list.name.toLowerCase()] ||\n          'a-fazer') as any,\n        priority: priority as any,\n        trelloCardId: card.id,\n        labels: card.labels.map(label => label.name).filter(Boolean),\n        startDate: new Date().toISOString(),\n        estimatedEndDate:\n          card.due ||\n          new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n        imageUrl: undefined,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n\n      return trelloProject;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Notifica subscriptions em tempo real\n   */\n  private async notifyRealtimeSubscriptions(\n    project: TrelloProject,\n    actionType: string\n  ): Promise<void> {\n    try {\n      const mcpStatus = supabaseMCPService.getConnectionStatus();\n\n      if (!mcpStatus.connected) {\n        return;\n      }\n\n      // Configura subscription se não existir\n      if (mcpStatus.subscriptions === 0) {\n        await supabaseMCPService.setupRealtimeSubscription({\n          table: 'projects',\n          event: '*',\n          callback: payload => {\n            // Aqui seria disparado evento para UI\n            if (typeof window !== 'undefined') {\n              window.dispatchEvent(\n                new CustomEvent('project-updated', {\n                  detail: { payload, actionType },\n                })\n              );\n            }\n          },\n        });\n      }\n\n      console.log(\n        `📡 Notificação real-time enviada: ${project.title} (${actionType})`\n      );\n    } catch (error) {\n      console.error('Erro ao notificar subscriptions:', error);\n    }\n  }\n\n  /**\n   * Processa fila de webhooks pendentes\n   */\n  private async processQueue(): Promise<void> {\n    while (this.processingQueue.length > 0) {\n      const payload = this.processingQueue.shift();\n\n      if (payload) {\n        await this.handleWebhookPayload(payload);\n      }\n    }\n  }\n\n  /**\n   * Sanitiza strings para segurança\n   */\n  private sanitizeString(input: string): string {\n    if (!input || typeof input !== 'string') return '';\n\n    return input\n      .trim()\n      .replace(/[<>]/g, '') // Remove HTML tags\n      .replace(/javascript:/gi, '') // Remove JS protocol\n      .replace(/on\\w+=/gi, '') // Remove event handlers\n      .substring(0, 255); // Limita tamanho\n  }\n\n  /**\n   * Obtém estatísticas da fila de processamento\n   */\n  getQueueStats() {\n    return {\n      isProcessing: this.isProcessing,\n      queueLength: this.processingQueue.length,\n    };\n  }\n\n  /**\n   * Limpa fila de processamento\n   */\n  clearQueue(): void {\n    this.processingQueue = [];\n  }\n}\n\n// Instância singleton do handler de webhooks\nexport const webhookHandler = new WebhookHandler();\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\trello.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\types\\prisma-mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\utils\\advanced-rate-limiter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\utils\\transformers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\lib\\utils\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\supabase\\functions\\trello-webhook\\index.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":191,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":191,"endColumn":20,"suggestions":[{"fix":{"range":[5393,5453],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":359,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":359,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Edge Function para processar webhooks do Trello\n * Integração com MCP para sincronização em tempo real\n * Seguindo padrões de Vibe Coding e segurança enterprise\n */\n\n// @ts-ignore - Deno runtime imports\nimport { serve } from 'https://deno.land/std@0.168.0/http/server.ts';\n// @ts-ignore - Deno runtime imports\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\n\n// Tipos para webhook do Trello\ninterface TrelloWebhookPayload {\n  action: {\n    type: string;\n    data: {\n      card?: {\n        id: string;\n        name: string;\n        desc: string;\n        due: string | null;\n        list: {\n          id: string;\n          name: string;\n        };\n        labels: Array<{\n          id: string;\n          name: string;\n          color: string;\n        }>;\n        members: Array<{\n          id: string;\n          fullName: string;\n        }>;\n        checklists?: Array<{\n          checkItems: Array<{\n            state: 'complete' | 'incomplete';\n          }>;\n        }>;\n      };\n      list?: {\n        id: string;\n        name: string;\n      };\n      board?: {\n        id: string;\n        name: string;\n      };\n    };\n  };\n  model: {\n    id: string;\n    name: string;\n  };\n}\n\ninterface ProcessedProject {\n  title: string;\n  description: string;\n  progress: number;\n  platforms: string[];\n  responsible: string[];\n  status: string;\n  priority: string;\n  trelloCardId: string;\n  labels: string[];\n  estimatedEndDate: string;\n}\n\n/**\n * Processa webhook do Trello e transforma em projeto\n */\nfunction processWebhookData(\n  payload: TrelloWebhookPayload\n): ProcessedProject | null {\n  const { action } = payload;\n\n  // Só processa eventos de cards\n  if (!action.data.card) {\n    // Webhook ignorado: não é evento de card\n    return null;\n  }\n\n  const card = action.data.card;\n\n  try {\n    // Mapeamento de status baseado na lista\n    const statusMapping: Record<string, string> = {\n      planning: 'a-fazer',\n      backlog: 'a-fazer',\n      'to do': 'a-fazer',\n      fazer: 'a-fazer',\n      development: 'em-andamento',\n      doing: 'em-andamento',\n      progress: 'em-andamento',\n      andamento: 'em-andamento',\n      desenvolvimento: 'em-andamento',\n      done: 'concluido',\n      completed: 'concluido',\n      concluido: 'concluido',\n      finalizado: 'concluido',\n    };\n\n    // Mapeamento de plataformas\n    const platformMapping: Record<string, string> = {\n      n8n: 'N8N',\n      jira: 'Jira',\n      hubspot: 'Hubspot',\n      backoffice: 'Backoffice',\n      'google workspace': 'Google Workspace',\n      google: 'Google Workspace',\n    };\n\n    // Mapeamento de membros\n    const memberMapping: Record<string, string> = {\n      'guilherme souza': 'Guilherme Souza',\n      guilherme: 'Guilherme Souza',\n      'felipe braat': 'Felipe Braat',\n      felipe: 'Felipe Braat',\n      'tiago triani': 'Tiago Triani',\n      tiago: 'Tiago Triani',\n    };\n\n    // Extrai plataformas dos labels\n    const platforms = card.labels\n      .map(label => {\n        const labelName = label.name.toLowerCase();\n\n        return platformMapping[labelName];\n      })\n      .filter((platform): platform is string => Boolean(platform));\n\n    // Extrai responsáveis dos membros\n    const responsible = card.members.map(member => {\n      const memberName = member.fullName.toLowerCase();\n\n      return memberMapping[memberName] || member.fullName;\n    });\n\n    // Calcula progresso baseado em checklists\n    let progress = 0;\n\n    if (card.checklists && card.checklists.length > 0) {\n      const allItems = card.checklists.flatMap(\n        checklist => checklist.checkItems\n      );\n      const completedItems = allItems.filter(item => item.state === 'complete');\n\n      progress =\n        allItems.length > 0\n          ? Math.round((completedItems.length / allItems.length) * 100)\n          : 0;\n    } else {\n      // Progresso baseado no status se não há checklists\n      const listName = card.list.name.toLowerCase();\n\n      if (statusMapping[listName] === 'a-fazer') progress = 5;\n      else if (statusMapping[listName] === 'em-andamento') progress = 45;\n      else if (statusMapping[listName] === 'concluido') progress = 100;\n    }\n\n    // Determina prioridade baseada em labels vermelhos/amarelos\n    let priority = 'medium';\n    const hasRedLabel = card.labels.some(label => label.color === 'red');\n    const hasYellowLabel = card.labels.some(label => label.color === 'yellow');\n    const hasGreenLabel = card.labels.some(label => label.color === 'green');\n\n    if (hasRedLabel) priority = 'high';\n    else if (hasGreenLabel) priority = 'low';\n    else if (hasYellowLabel) priority = 'medium';\n\n    const processedProject: ProcessedProject = {\n      title: sanitizeString(card.name),\n      description: sanitizeString(card.desc || ''),\n      progress,\n      platforms: platforms.length > 0 ? platforms : ['Backoffice'],\n      responsible: responsible.length > 0 ? responsible : ['Guilherme Souza'],\n      status: statusMapping[card.list.name.toLowerCase()] || 'a-fazer',\n      priority,\n      trelloCardId: card.id,\n      labels: card.labels.map(label => label.name).filter(Boolean),\n      estimatedEndDate:\n        card.due ||\n        new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n    };\n\n    return processedProject;\n  } catch (error) {\n    // Log error silently in production\n    if ((globalThis as any).Deno?.env?.get?.('NODE_ENV') === 'development') {\n      console.error('Erro ao processar dados do webhook:', error);\n    }\n\n    return null;\n  }\n}\n\n/**\n * Sanitiza strings para segurança\n */\nfunction sanitizeString(input: string): string {\n  if (!input || typeof input !== 'string') return '';\n\n  return input\n    .trim()\n    .replace(/[<>]/g, '') // Remove HTML tags\n    .replace(/javascript:/gi, '') // Remove JS protocol\n    .replace(/on\\w+=/gi, '') // Remove event handlers\n    .substring(0, 255); // Limita tamanho\n}\n\n/**\n * Valida assinatura do webhook (segurança)\n */\nfunction validateWebhookSignature(request: Request, _body: string): boolean {\n  const signature = request.headers.get('x-trello-webhook');\n\n  // Access Deno environment variables properly\n  const secret = (globalThis as any).Deno?.env?.get?.('TRELLO_WEBHOOK_SECRET');\n\n  if (!signature || !secret) {\n    // Webhook sem assinatura ou secret não configurado\n    return false;\n  }\n\n  // Implementar validação HMAC aqui se necessário\n  // Por enquanto, aceita qualquer webhook com header\n  return true;\n}\n\n/**\n * Handler principal da Edge Function\n */\nserve(async (req: Request) => {\n  // CORS headers\n  const corsHeaders = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers':\n      'authorization, x-client-info, apikey, content-type',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n  };\n\n  // Handle CORS preflight\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders });\n  }\n\n  // Só aceita POST\n  if (req.method !== 'POST') {\n    return new Response('Method not allowed', {\n      status: 405,\n      headers: corsHeaders,\n    });\n  }\n\n  try {\n    const body = await req.text();\n\n    // Valida assinatura do webhook\n    if (!validateWebhookSignature(req, body)) {\n      return new Response('Unauthorized', {\n        status: 401,\n        headers: corsHeaders,\n      });\n    }\n\n    const payload: TrelloWebhookPayload = JSON.parse(body);\n\n    // Processa apenas eventos relevantes\n    const relevantEvents = [\n      'createCard',\n      'updateCard',\n      'deleteCard',\n      'moveCardToBoard',\n      'moveCardFromBoard',\n    ];\n\n    if (!relevantEvents.includes(payload.action.type)) {\n      return new Response('Event ignored', {\n        status: 200,\n        headers: corsHeaders,\n      });\n    }\n\n    // Processa dados do webhook\n    const processedProject = processWebhookData(payload);\n\n    if (!processedProject) {\n      return new Response('No project data', {\n        status: 200,\n        headers: corsHeaders,\n      });\n    }\n\n    // Conecta ao Supabase\n    const supabaseUrl = (globalThis as any).Deno?.env?.get?.('SUPABASE_URL')!;\n    const supabaseKey = (globalThis as any).Deno?.env?.get?.(\n      'SUPABASE_SERVICE_ROLE_KEY'\n    )!;\n    const supabase = createClient(supabaseUrl, supabaseKey);\n\n    // Upsert do projeto no banco\n    const { data, error } = await supabase.from('projects').upsert(\n      {\n        title: processedProject.title,\n        description: processedProject.description,\n        progress: processedProject.progress,\n        platforms: processedProject.platforms,\n        responsible: processedProject.responsible,\n        status: processedProject.status,\n        priority: processedProject.priority,\n        trello_card_id: processedProject.trelloCardId,\n        labels: processedProject.labels,\n        estimated_end_date: processedProject.estimatedEndDate,\n        start_date: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      },\n      {\n        onConflict: 'trello_card_id',\n      }\n    );\n\n    if (error) {\n      return new Response('Database error', {\n        status: 500,\n        headers: corsHeaders,\n      });\n    }\n\n    // Log de sucesso no histórico de sync\n    await supabase.from('sync_history').insert({\n      project_id: data?.[0]?.id || 'unknown',\n      action: payload.action.type === 'createCard' ? 'CREATED' : 'UPDATED',\n      source: 'trello-webhook',\n      success: true,\n      details: {\n        webhookType: payload.action.type,\n        cardId: processedProject.trelloCardId,\n        timestamp: new Date().toISOString(),\n      },\n    });\n\n    // Projeto sincronizado via webhook silentemente\n\n    return new Response(\n      JSON.stringify({\n        success: true,\n        project: processedProject.title,\n        action: payload.action.type,\n      }),\n      {\n        status: 200,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify({\n        success: false,\n        error: 'Internal server error',\n      }),\n      {\n        status: 500,\n        headers: {\n          ...corsHeaders,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n  }\n});\n","usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\types\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]},{"filePath":"C:\\Projetos Webapp Febrate\\inpatch-suporte\\types\\project.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"padding-line-between-statements","replacedBy":["@stylistic/js/padding-line-between-statements"],"info":{"message":"Formatting rules are being moved out of ESLint core.","url":"https://eslint.org/blog/2023/10/deprecating-formatting-rules/","deprecatedSince":"8.53.0","availableUntil":"10.0.0","replacedBy":[{"message":"ESLint Stylistic now maintains deprecated stylistic core rules.","url":"https://eslint.style/guide/migration","plugin":{"name":"@stylistic/eslint-plugin-js","url":"https://eslint.style/packages/js"},"rule":{"name":"padding-line-between-statements","url":"https://eslint.style/rules/js/padding-line-between-statements"}}]}}]}]